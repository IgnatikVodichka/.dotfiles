var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJsonDocument = exports.isTsDocument = void 0;
const ts2 = require("./createLanguageService");
const semver = require("semver");
const vscode = require("vscode-languageserver-protocol");
const shared = require("@volar/shared");
function getBasicTriggerCharacters(tsVersion) {
    const triggerCharacters = ['.', '"', '\'', '`', '/', '<'];
    // https://github.com/microsoft/vscode/blob/8e65ae28d5fb8b3c931135da1a41edb9c80ae46f/extensions/typescript-language-features/src/languageFeatures/completions.ts#L811-L833
    if (semver.lt(tsVersion, '3.1.0') || semver.gte(tsVersion, '3.2.0')) {
        triggerCharacters.push('@');
    }
    if (semver.gte(tsVersion, '3.8.1')) {
        triggerCharacters.push('#');
    }
    if (semver.gte(tsVersion, '4.3.0')) {
        triggerCharacters.push(' ');
    }
    return triggerCharacters;
}
const jsDocTriggerCharacters = ['*'];
const directiveCommentTriggerCharacters = ['@'];
function default_1() {
    const basicTriggerCharacters = getBasicTriggerCharacters('4.3.0');
    let context;
    let tsLs2;
    return {
        setup(_context) {
            context = _context;
            tsLs2 = ts2.createLanguageService(context.typescript.module, context.typescript.languageServiceHost, context.typescript.languageService, (section) => { var _a; return (_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration(section); }, context.env.rootUri);
        },
        doAutoInsert(document, position, ctx) {
            var _a, _b;
            if ((document.languageId === 'javascriptreact' || document.languageId === 'typescriptreact')
                && ctx.lastChange.text.endsWith('>')) {
                const configName = document.languageId === 'javascriptreact' ? 'javascript.autoClosingTags' : 'typescript.autoClosingTags';
                const config = (_b = (_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration(configName)) !== null && _b !== void 0 ? _b : true;
                if (config) {
                    const tsLs = context.typescript.languageService;
                    const close = tsLs.getJsxClosingTagAtPosition(shared.getPathOfUri(document.uri), document.offsetAt(position));
                    if (close) {
                        return '$0' + close.newText;
                    }
                }
            }
        },
        complete: {
            triggerCharacters: [
                ...basicTriggerCharacters,
                ...jsDocTriggerCharacters,
                ...directiveCommentTriggerCharacters,
            ],
            on(document, position, context) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (isTsDocument(document)) {
                        let result = {
                            isIncomplete: false,
                            items: [],
                        };
                        if (!context || context.triggerKind !== vscode.CompletionTriggerKind.TriggerCharacter || (context.triggerCharacter && basicTriggerCharacters.includes(context.triggerCharacter))) {
                            const completeOptions = {
                                triggerCharacter: context === null || context === void 0 ? void 0 : context.triggerCharacter,
                                triggerKind: context === null || context === void 0 ? void 0 : context.triggerKind,
                            };
                            const basicResult = yield tsLs2.doComplete(document.uri, position, completeOptions);
                            if (basicResult) {
                                result = basicResult;
                            }
                        }
                        if (!context || context.triggerKind !== vscode.CompletionTriggerKind.TriggerCharacter || (context.triggerCharacter && jsDocTriggerCharacters.includes(context.triggerCharacter))) {
                            const jsdocResult = yield tsLs2.doJsDocComplete(document.uri, position);
                            if (jsdocResult) {
                                result.items.push(jsdocResult);
                            }
                        }
                        if (!context || context.triggerKind !== vscode.CompletionTriggerKind.TriggerCharacter || (context.triggerCharacter && directiveCommentTriggerCharacters.includes(context.triggerCharacter))) {
                            const directiveCommentResult = yield tsLs2.doDirectiveCommentComplete(document.uri, position);
                            if (directiveCommentResult) {
                                result.items = result.items.concat(directiveCommentResult);
                            }
                        }
                        return result;
                    }
                });
            },
            resolve(item) {
                return tsLs2.doCompletionResolve(item);
            },
        },
        rename: {
            prepare(document, position) {
                if (isTsDocument(document)) {
                    return tsLs2.prepareRename(document.uri, position);
                }
            },
            on(document, position, newName) {
                if (isTsDocument(document) || isJsonDocument(document)) {
                    return tsLs2.doRename(document.uri, position, newName);
                }
            },
        },
        codeAction: {
            on(document, range, context) {
                if (isTsDocument(document)) {
                    return tsLs2.getCodeActions(document.uri, range, context);
                }
            },
            resolve(codeAction) {
                return tsLs2.doCodeActionResolve(codeAction);
            },
        },
        inlayHints: {
            on(document, range) {
                if (isTsDocument(document)) {
                    return tsLs2.getInlayHints(document.uri, range);
                }
            },
        },
        callHierarchy: {
            prepare(document, position) {
                if (isTsDocument(document)) {
                    return tsLs2.callHierarchy.doPrepare(document.uri, position);
                }
            },
            onIncomingCalls(item) {
                return tsLs2.callHierarchy.getIncomingCalls(item);
            },
            onOutgoingCalls(item) {
                return tsLs2.callHierarchy.getOutgoingCalls(item);
            },
        },
        definition: {
            on(document, position) {
                if (isTsDocument(document)) {
                    return tsLs2.findDefinition(document.uri, position);
                }
            },
            onType(document, position) {
                if (isTsDocument(document)) {
                    return tsLs2.findTypeDefinition(document.uri, position);
                }
            },
        },
        validation: {
            onSemantic(document) {
                if (isTsDocument(document)) {
                    return tsLs2.doValidation(document.uri, { semantic: true });
                }
            },
            onDeclaration(document) {
                if (isTsDocument(document)) {
                    return tsLs2.doValidation(document.uri, { declaration: true });
                }
            },
            onSuggestion(document) {
                if (isTsDocument(document)) {
                    return tsLs2.doValidation(document.uri, { suggestion: true });
                }
            },
            onSyntactic(document) {
                if (isTsDocument(document)) {
                    return tsLs2.doValidation(document.uri, { syntactic: true });
                }
            },
        },
        doHover(document, position) {
            if (isTsDocument(document)) {
                return tsLs2.doHover(document.uri, position);
            }
        },
        findImplementations(document, position) {
            if (isTsDocument(document)) {
                return tsLs2.findImplementations(document.uri, position);
            }
        },
        findReferences(document, position) {
            if (isTsDocument(document) || isJsonDocument(document)) {
                return tsLs2.findReferences(document.uri, position);
            }
        },
        findFileReferences(document) {
            if (isTsDocument(document) || isJsonDocument(document)) {
                return tsLs2.findFileReferences(document.uri);
            }
        },
        findDocumentHighlights(document, position) {
            if (isTsDocument(document)) {
                return tsLs2.findDocumentHighlights(document.uri, position);
            }
        },
        findDocumentSymbols(document) {
            if (isTsDocument(document)) {
                return tsLs2.findDocumentSymbols(document.uri);
            }
        },
        findDocumentSemanticTokens(document, range, legend) {
            if (isTsDocument(document)) {
                return tsLs2.getDocumentSemanticTokens(document.uri, range, legend);
            }
        },
        findWorkspaceSymbols(query) {
            return tsLs2.findWorkspaceSymbols(query);
        },
        doFileRename(oldUri, newUri) {
            return tsLs2.getEditsForFileRename(oldUri, newUri);
        },
        getFoldingRanges(document) {
            if (isTsDocument(document)) {
                return tsLs2.getFoldingRanges(document.uri);
            }
        },
        getSelectionRanges(document, positions) {
            if (isTsDocument(document)) {
                return tsLs2.getSelectionRanges(document.uri, positions);
            }
        },
        getSignatureHelp(document, position, context) {
            if (isTsDocument(document)) {
                return tsLs2.getSignatureHelp(document.uri, position, context);
            }
        },
        format(document, range, options_2) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (isTsDocument(document)) {
                    const enable = yield ((_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration(getConfigTitle(document) + '.format.enable'));
                    if (enable === false) {
                        return;
                    }
                    return tsLs2.doFormatting.onRange(document.uri, options_2, range);
                }
            });
        },
        formatOnType(document, position, key, options_2) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (isTsDocument(document)) {
                    const enable = yield ((_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration(getConfigTitle(document) + '.format.enable'));
                    if (enable === false) {
                        return;
                    }
                    return tsLs2.doFormatting.onType(document.uri, options_2, position, key);
                }
            });
        },
    };
}
exports.default = default_1;
function getConfigTitle(document) {
    if (document.languageId === 'javascriptreact') {
        return 'javascript';
    }
    if (document.languageId === 'typescriptreact') {
        return 'typescript';
    }
    return document.languageId;
}
function isTsDocument(document) {
    return document.languageId === 'javascript' ||
        document.languageId === 'typescript' ||
        document.languageId === 'javascriptreact' ||
        document.languageId === 'typescriptreact';
}
exports.isTsDocument = isTsDocument;
function isJsonDocument(document) {
    return document.languageId === 'json' ||
        document.languageId === 'jsonc';
}
exports.isJsonDocument = isJsonDocument;
//# sourceMappingURL=index.js.map
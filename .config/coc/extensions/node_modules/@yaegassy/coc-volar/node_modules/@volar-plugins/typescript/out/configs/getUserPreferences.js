var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUserPreferences = void 0;
const shared_1 = require("./shared");
const path_1 = require("path");
const vscode_uri_1 = require("vscode-uri");
function getUserPreferences(getConfiguration, uri, workspaceFolder) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18;
    return __awaiter(this, void 0, void 0, function* () {
        const config = (_a = yield getConfiguration((0, shared_1.isTypeScriptDocument)(uri) ? 'typescript' : 'javascript')) !== null && _a !== void 0 ? _a : {};
        const preferencesConfig = (_b = config === null || config === void 0 ? void 0 : config.preferences) !== null && _b !== void 0 ? _b : {};
        const preferences = Object.assign(Object.assign({}, (_c = config.unstable) !== null && _c !== void 0 ? _c : {}), { quotePreference: getQuoteStylePreference(preferencesConfig), importModuleSpecifierPreference: getImportModuleSpecifierPreference(preferencesConfig), importModuleSpecifierEnding: getImportModuleSpecifierEndingPreference(preferencesConfig), jsxAttributeCompletionStyle: getJsxAttributeCompletionStyle(preferencesConfig), allowTextChangesInNewFiles: uri.startsWith('file://'), providePrefixAndSuffixTextForRename: ((_d = preferencesConfig.renameShorthandProperties) !== null && _d !== void 0 ? _d : true) === false ? false : ((_e = preferencesConfig.useAliasesForRenames) !== null && _e !== void 0 ? _e : true), allowRenameOfImportPath: true, includeAutomaticOptionalChainCompletions: (_g = (_f = config.suggest) === null || _f === void 0 ? void 0 : _f.includeAutomaticOptionalChainCompletions) !== null && _g !== void 0 ? _g : true, provideRefactorNotApplicableReason: true, generateReturnInDocTemplate: (_k = (_j = (_h = config.suggest) === null || _h === void 0 ? void 0 : _h.jsdoc) === null || _j === void 0 ? void 0 : _j.generateReturns) !== null && _k !== void 0 ? _k : true, includeCompletionsForImportStatements: (_m = (_l = config.suggest) === null || _l === void 0 ? void 0 : _l.includeCompletionsForImportStatements) !== null && _m !== void 0 ? _m : true, includeCompletionsWithSnippetText: (_p = (_o = config.suggest) === null || _o === void 0 ? void 0 : _o.includeCompletionsWithSnippetText) !== null && _p !== void 0 ? _p : true, includeCompletionsWithClassMemberSnippets: (_s = (_r = (_q = config.suggest) === null || _q === void 0 ? void 0 : _q.classMemberSnippets) === null || _r === void 0 ? void 0 : _r.enabled) !== null && _s !== void 0 ? _s : true, includeCompletionsWithObjectLiteralMethodSnippets: (_v = (_u = (_t = config.suggest) === null || _t === void 0 ? void 0 : _t.objectLiteralMethodSnippets) === null || _u === void 0 ? void 0 : _u.enabled) !== null && _v !== void 0 ? _v : true, autoImportFileExcludePatterns: getAutoImportFileExcludePatternsPreference(preferencesConfig, workspaceFolder), useLabelDetailsInCompletionEntries: true, allowIncompleteCompletions: true, displayPartsForJSDoc: true, 
            // inlay hints
            includeInlayParameterNameHints: getInlayParameterNameHintsPreference(config), includeInlayParameterNameHintsWhenArgumentMatchesName: !((_y = (_x = (_w = config.inlayHints) === null || _w === void 0 ? void 0 : _w.parameterNames) === null || _x === void 0 ? void 0 : _x.suppressWhenArgumentMatchesName) !== null && _y !== void 0 ? _y : true), includeInlayFunctionParameterTypeHints: (_1 = (_0 = (_z = config.inlayHints) === null || _z === void 0 ? void 0 : _z.parameterTypes) === null || _0 === void 0 ? void 0 : _0.enabled) !== null && _1 !== void 0 ? _1 : false, includeInlayVariableTypeHints: (_4 = (_3 = (_2 = config.inlayHints) === null || _2 === void 0 ? void 0 : _2.variableTypes) === null || _3 === void 0 ? void 0 : _3.enabled) !== null && _4 !== void 0 ? _4 : false, includeInlayVariableTypeHintsWhenTypeMatchesName: !((_7 = (_6 = (_5 = config.inlayHints) === null || _5 === void 0 ? void 0 : _5.variableTypes) === null || _6 === void 0 ? void 0 : _6.suppressWhenTypeMatchesName) !== null && _7 !== void 0 ? _7 : true), includeInlayPropertyDeclarationTypeHints: (_10 = (_9 = (_8 = config.inlayHints) === null || _8 === void 0 ? void 0 : _8.propertyDeclarationTypes) === null || _9 === void 0 ? void 0 : _9.enabled) !== null && _10 !== void 0 ? _10 : false, includeInlayFunctionLikeReturnTypeHints: (_13 = (_12 = (_11 = config.inlayHints) === null || _11 === void 0 ? void 0 : _11.functionLikeReturnTypes) === null || _12 === void 0 ? void 0 : _12.enabled) !== null && _13 !== void 0 ? _13 : false, includeInlayEnumMemberValueHints: (_16 = (_15 = (_14 = config.inlayHints) === null || _14 === void 0 ? void 0 : _14.enumMemberValues) === null || _15 === void 0 ? void 0 : _15.enabled) !== null && _16 !== void 0 ? _16 : false, 
            // https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/src/languageFeatures/completions.ts#L728-L730
            includeCompletionsForModuleExports: (_18 = (_17 = config.suggest) === null || _17 === void 0 ? void 0 : _17.autoImports) !== null && _18 !== void 0 ? _18 : true, includeCompletionsWithInsertText: true });
        return preferences;
    });
}
exports.getUserPreferences = getUserPreferences;
function getQuoteStylePreference(config) {
    switch (config.quoteStyle) {
        case 'single': return 'single';
        case 'double': return 'double';
        default: return 'auto';
    }
}
function getAutoImportFileExcludePatternsPreference(config, workspaceFolder) {
    var _a;
    return workspaceFolder && ((_a = config.autoImportFileExcludePatterns) === null || _a === void 0 ? void 0 : _a.map(p => {
        // Normalization rules: https://github.com/microsoft/TypeScript/pull/49578
        const slashNormalized = p.replace(/\\/g, '/');
        const isRelative = /^\.\.?($|\/)/.test(slashNormalized);
        return path_1.posix.isAbsolute(p) ? p :
            p.startsWith('*') ? '/' + slashNormalized :
                isRelative ? vscode_uri_1.URI.parse(path_1.posix.join(workspaceFolder.toString(), p)).fsPath :
                    '/**/' + slashNormalized;
    }));
}
function getImportModuleSpecifierPreference(config) {
    switch (config.importModuleSpecifier) {
        case 'project-relative': return 'project-relative';
        case 'relative': return 'relative';
        case 'non-relative': return 'non-relative';
        default: return undefined;
    }
}
function getImportModuleSpecifierEndingPreference(config) {
    switch (config.importModuleSpecifierEnding) {
        case 'minimal': return 'minimal';
        case 'index': return 'index';
        case 'js': return 'js';
        default: return 'minimal'; // fix https://github.com/johnsoncodehk/volar/issues/1667
        // default: return 'auto';
    }
}
function getJsxAttributeCompletionStyle(config) {
    switch (config.jsxAttributeCompletionStyle) {
        case 'braces': return 'braces';
        case 'none': return 'none';
        default: return 'auto';
    }
}
function getInlayParameterNameHintsPreference(config) {
    var _a, _b;
    switch ((_b = (_a = config.inlayHints) === null || _a === void 0 ? void 0 : _a.parameterNames) === null || _b === void 0 ? void 0 : _b.enabled) {
        case 'none': return 'none';
        case 'literals': return 'literals';
        case 'all': return 'all';
        default: return undefined;
    }
}
//# sourceMappingURL=getUserPreferences.js.map
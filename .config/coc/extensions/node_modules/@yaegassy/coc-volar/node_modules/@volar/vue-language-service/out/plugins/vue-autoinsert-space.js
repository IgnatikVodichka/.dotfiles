var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function default_1() {
    let context;
    return {
        setup(_context) {
            context = _context;
        },
        doAutoInsert(document, _, { lastChange }) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                if (document.languageId === 'html' || document.languageId === 'jade') {
                    const enabled = (_b = yield ((_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration('volar.addSpaceBetweenDoubleCurlyBrackets'))) !== null && _b !== void 0 ? _b : true;
                    if (!enabled)
                        return;
                    if (lastChange.text === '{}'
                        && document.getText({
                            start: { line: lastChange.range.start.line, character: lastChange.range.start.character - 1 },
                            end: { line: lastChange.range.start.line, character: lastChange.range.start.character + 3 }
                        }) === '{{}}') {
                        return {
                            newText: ` $0 `,
                            range: {
                                start: { line: lastChange.range.start.line, character: lastChange.range.start.character + 1 },
                                end: { line: lastChange.range.start.line, character: lastChange.range.start.character + 1 }
                            },
                        };
                    }
                }
            });
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=vue-autoinsert-space.js.map
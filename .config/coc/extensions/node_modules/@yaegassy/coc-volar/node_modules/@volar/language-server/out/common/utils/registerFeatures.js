Object.defineProperty(exports, "__esModule", { value: true });
exports.setupSemanticCapabilities = exports.setupSyntacticCapabilities = void 0;
const embedded = require("@volar/language-service");
const types_1 = require("../../types");
const vscode = require("vscode-languageserver");
function setupSyntacticCapabilities(params, server, initOptions) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (!initOptions.respectClientCapabilities || ((_a = params.textDocument) === null || _a === void 0 ? void 0 : _a.selectionRange)) {
        server.selectionRangeProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_b = params.textDocument) === null || _b === void 0 ? void 0 : _b.foldingRange)) {
        server.foldingRangeProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_c = params.textDocument) === null || _c === void 0 ? void 0 : _c.linkedEditingRange)) {
        server.linkedEditingRangeProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_d = params.textDocument) === null || _d === void 0 ? void 0 : _d.colorProvider)) {
        server.colorProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_e = params.textDocument) === null || _e === void 0 ? void 0 : _e.documentSymbol)) {
        server.documentSymbolProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_f = params.textDocument) === null || _f === void 0 ? void 0 : _f.formatting)) {
        server.documentFormattingProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_g = params.textDocument) === null || _g === void 0 ? void 0 : _g.rangeFormatting)) {
        server.documentRangeFormattingProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_h = params.textDocument) === null || _h === void 0 ? void 0 : _h.onTypeFormatting)) {
        // https://github.com/microsoft/vscode/blob/ce119308e8fd4cd3f992d42b297588e7abe33a0c/extensions/typescript-language-features/src/languageFeatures/formatting.ts#L99
        server.documentOnTypeFormattingProvider = {
            firstTriggerCharacter: ';',
            moreTriggerCharacter: ['}', '\n'],
        };
    }
}
exports.setupSyntacticCapabilities = setupSyntacticCapabilities;
function setupSemanticCapabilities(params, server, initOptions, plugins, semanticTokensLegend) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
    if (!initOptions.respectClientCapabilities || ((_a = params.textDocument) === null || _a === void 0 ? void 0 : _a.references)) {
        server.referencesProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_b = params.textDocument) === null || _b === void 0 ? void 0 : _b.implementation)) {
        server.implementationProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_c = params.textDocument) === null || _c === void 0 ? void 0 : _c.definition)) {
        server.definitionProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_d = params.textDocument) === null || _d === void 0 ? void 0 : _d.typeDefinition)) {
        server.typeDefinitionProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_e = params.textDocument) === null || _e === void 0 ? void 0 : _e.callHierarchy)) {
        server.callHierarchyProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_f = params.textDocument) === null || _f === void 0 ? void 0 : _f.hover)) {
        server.hoverProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_g = params.textDocument) === null || _g === void 0 ? void 0 : _g.rename)) {
        server.renameProvider = {
            prepareProvider: true,
        };
    }
    if (!initOptions.respectClientCapabilities || ((_h = params.workspace) === null || _h === void 0 ? void 0 : _h.fileOperations)) {
        server.workspace = {
            fileOperations: {
                willRename: {
                    filters: [
                        ...plugins.map(plugin => plugin.extraFileExtensions.map(ext => ({ pattern: { glob: `**/*.${ext.extension}` } }))).flat(),
                        { pattern: { glob: '**/*.js' } },
                        { pattern: { glob: '**/*.cjs' } },
                        { pattern: { glob: '**/*.mjs' } },
                        { pattern: { glob: '**/*.ts' } },
                        { pattern: { glob: '**/*.cts' } },
                        { pattern: { glob: '**/*.mts' } },
                        { pattern: { glob: '**/*.jsx' } },
                        { pattern: { glob: '**/*.tsx' } },
                        { pattern: { glob: '**/*.json' } },
                    ]
                }
            }
        };
    }
    if (!initOptions.respectClientCapabilities || ((_j = params.textDocument) === null || _j === void 0 ? void 0 : _j.signatureHelp)) {
        server.signatureHelpProvider = {
            triggerCharacters: ['(', ',', '<'],
            retriggerCharacters: [')'],
        };
    }
    if (!initOptions.respectClientCapabilities || ((_k = params.textDocument) === null || _k === void 0 ? void 0 : _k.completion)) {
        server.completionProvider = {
            // triggerCharacters: '!@#$%^&*()_+-=`~{}|[]\:";\'<>?,./ '.split(''), // all symbols on keyboard
            // hardcode to fix https://github.com/sublimelsp/LSP-volar/issues/114
            triggerCharacters: [...new Set([
                    '/', '-', ':',
                    ...'>+^*()#.[]$@-{}'.split(''),
                    '.', ':', '<', '"', '=', '/',
                    '@',
                    '"', ':',
                    '.', '"', '\'', '`', '/', '<', '@', '#', ' ',
                    '*',
                    '@', // typescript-comment
                ])],
            resolveProvider: true,
        };
        if (initOptions.ignoreTriggerCharacters) {
            server.completionProvider.triggerCharacters = (_l = server.completionProvider.triggerCharacters) === null || _l === void 0 ? void 0 : _l.filter(c => !initOptions.ignoreTriggerCharacters.includes(c));
        }
    }
    if (!initOptions.respectClientCapabilities || ((_m = params.textDocument) === null || _m === void 0 ? void 0 : _m.documentHighlight)) {
        server.documentHighlightProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_o = params.textDocument) === null || _o === void 0 ? void 0 : _o.documentLink)) {
        server.documentLinkProvider = {
            resolveProvider: false, // TODO
        };
    }
    if (!initOptions.respectClientCapabilities || ((_p = params.workspace) === null || _p === void 0 ? void 0 : _p.symbol)) {
        server.workspaceSymbolProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_q = params.textDocument) === null || _q === void 0 ? void 0 : _q.codeLens)) {
        server.codeLensProvider = {
            resolveProvider: true,
        };
        server.executeCommandProvider = { commands: [...(_s = (_r = server.executeCommandProvider) === null || _r === void 0 ? void 0 : _r.commands) !== null && _s !== void 0 ? _s : []] };
        server.executeCommandProvider.commands.push(embedded.executePluginCommand);
    }
    if (!initOptions.respectClientCapabilities || ((_t = params.textDocument) === null || _t === void 0 ? void 0 : _t.semanticTokens)) {
        server.semanticTokensProvider = {
            range: true,
            full: false,
            legend: semanticTokensLegend,
        };
    }
    if (!initOptions.respectClientCapabilities || ((_u = params.textDocument) === null || _u === void 0 ? void 0 : _u.codeAction)) {
        server.codeActionProvider = {
            codeActionKinds: [
                vscode.CodeActionKind.Empty,
                vscode.CodeActionKind.QuickFix,
                vscode.CodeActionKind.Refactor,
                vscode.CodeActionKind.RefactorExtract,
                vscode.CodeActionKind.RefactorInline,
                vscode.CodeActionKind.RefactorRewrite,
                vscode.CodeActionKind.Source,
                vscode.CodeActionKind.SourceFixAll,
                vscode.CodeActionKind.SourceOrganizeImports,
            ],
            resolveProvider: true,
        };
    }
    if (!initOptions.respectClientCapabilities || ((_v = params.textDocument) === null || _v === void 0 ? void 0 : _v.inlayHint)) {
        server.inlayHintProvider = true;
    }
    if (!initOptions.respectClientCapabilities || ((_w = params.textDocument) === null || _w === void 0 ? void 0 : _w.diagnostic) && ((_x = initOptions.diagnosticModel) !== null && _x !== void 0 ? _x : types_1.DiagnosticModel.Push) === types_1.DiagnosticModel.Pull) {
        server.diagnosticProvider = {
            documentSelector: [
                ...plugins.map(plugin => plugin.extraFileExtensions.map(ext => ({ pattern: `**/*.${ext.extension}` }))).flat(),
                { pattern: '**/*.{ts,js,tsx,jsx}' },
            ],
            interFileDependencies: true,
            workspaceDiagnostics: false,
        };
    }
}
exports.setupSemanticCapabilities = setupSemanticCapabilities;
//# sourceMappingURL=registerFeatures.js.map
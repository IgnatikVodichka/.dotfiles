import { createLanguageContext, LanguageServiceHost } from '@volar/language-core';
import * as executeCommand from './languageFeatures/executeCommand';
import { LanguageServicePlugin, LanguageServicePluginContext, LanguageServiceRuntimeContext } from './types';
import type * as ts from 'typescript/lib/tsserverlibrary';
import type * as _ from 'vscode-languageserver-protocol';
export type LanguageService = ReturnType<typeof createLanguageService>;
export declare function createLanguageServiceContext(options: {
    host: LanguageServiceHost;
    context: ReturnType<typeof createLanguageContext>;
    getPlugins(): LanguageServicePlugin[];
    env: LanguageServicePluginContext['env'];
    documentRegistry: ts.DocumentRegistry | undefined;
}): LanguageServiceRuntimeContext;
export declare function createLanguageService(context: LanguageServiceRuntimeContext): {
    doValidation: (uri: string, token?: _.CancellationToken | undefined, response?: ((result: _.Diagnostic[]) => void) | undefined) => Promise<_.Diagnostic[]>;
    findReferences: (uri: string, position: _.Position) => Promise<_.Location[] | undefined>;
    findFileReferences: (uri: string) => import("./types").NullableResult<_.Location[]>;
    findDefinition: (uri: string, position: _.Position) => Promise<_.LocationLink[] | undefined>;
    findTypeDefinition: (uri: string, position: _.Position) => Promise<_.LocationLink[] | undefined>;
    findImplementations: (uri: string, position: _.Position) => Promise<_.LocationLink[] | undefined>;
    prepareRename: (uri: string, position: _.Position) => Promise<NonNullable<_.Range | _.ResponseError<void> | null | undefined> | undefined>;
    doRename: (uri: string, position: _.Position, newName: string) => Promise<_.WorkspaceEdit | undefined>;
    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<_.WorkspaceEdit | undefined>;
    getSemanticTokens: (uri: string, range: _.Range | undefined, legend: _.SemanticTokensLegend, cancelToken: _.CancellationToken, reportProgress?: ((tokens: import("./types").SemanticToken[]) => void) | undefined) => Promise<import("./types").SemanticToken[] | undefined> | undefined;
    doHover: (uri: string, position: _.Position) => Promise<_.Hover | undefined>;
    doComplete: (uri: string, position: _.Position, completionContext?: _.CompletionContext | undefined) => Promise<_.CompletionList>;
    doCodeActions: (uri: string, range: _.Range, codeActionContext: _.CodeActionContext) => Promise<_.CodeAction[] | undefined>;
    doCodeActionResolve: (item: _.CodeAction) => Promise<_.CodeAction>;
    doCompletionResolve: (item: _.CompletionItem) => Promise<_.CompletionItem>;
    getSignatureHelp: (uri: string, position: _.Position, signatureHelpContext?: _.SignatureHelpContext | undefined) => Promise<_.SignatureHelp | undefined>;
    doCodeLens: (uri: string) => Promise<_.CodeLens[]>;
    doCodeLensResolve: (item: _.CodeLens) => Promise<_.CodeLens>;
    findDocumentHighlights: (uri: string, position: _.Position) => Promise<_.DocumentHighlight[] | undefined>;
    findDocumentLinks: (uri: string) => Promise<_.DocumentLink[]>;
    findWorkspaceSymbols: (query: string) => Promise<_.SymbolInformation[]>;
    doAutoInsert: (uri: string, position: _.Position, autoInsertContext: {
        lastChange: {
            range: _.Range;
            rangeOffset: number;
            rangeLength: number;
            text: string;
        };
    }) => Promise<NonNullable<string | _.TextEdit | null | undefined> | undefined>;
    doExecuteCommand: (command: string, args: executeCommand.ExecutePluginCommandArgs, executeCommandContext: import("./types").ExecuteCommandContext) => Promise<void>;
    getInlayHints: (uri: string, range: _.Range) => Promise<_.InlayHint[] | undefined>;
    callHierarchy: {
        doPrepare(uri: string, position: _.Position): Promise<_.CallHierarchyItem[] | undefined>;
        getIncomingCalls(item: _.CallHierarchyItem): Promise<_.CallHierarchyIncomingCall[]>;
        getOutgoingCalls(item: _.CallHierarchyItem): Promise<_.CallHierarchyOutgoingCall[]>;
    };
    dispose: () => void;
    context: LanguageServiceRuntimeContext;
};

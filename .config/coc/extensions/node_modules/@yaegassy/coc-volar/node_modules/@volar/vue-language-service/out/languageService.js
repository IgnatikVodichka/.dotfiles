var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLanguageService = exports.getLanguageServicePlugins = void 0;
const css_1 = require("@volar-plugins/css");
const emmet_1 = require("@volar-plugins/emmet");
const html_1 = require("@volar-plugins/html");
const json_1 = require("@volar-plugins/json");
const pug_1 = require("@volar-plugins/pug");
const typescript_1 = require("@volar-plugins/typescript");
const typescript_twoslash_queries_1 = require("@volar-plugins/typescript-twoslash-queries");
const embedded = require("@volar/language-core");
const embeddedLS = require("@volar/language-service");
const vue = require("@volar/vue-language-core");
const vue_language_core_1 = require("@volar/vue-language-core");
const vscode = require("vscode-languageserver-protocol");
const vue_1 = require("./plugins/vue");
const vue_autoinsert_dotvalue_1 = require("./plugins/vue-autoinsert-dotvalue");
const vue_codelens_references_1 = require("./plugins/vue-codelens-references");
const vue_convert_htmlpug_1 = require("./plugins/vue-convert-htmlpug");
const vue_convert_refsugar_1 = require("./plugins/vue-convert-refsugar");
const vue_convert_scriptsetup_1 = require("./plugins/vue-convert-scriptsetup");
const vue_twoslash_queries_1 = require("./plugins/vue-twoslash-queries");
const vue_template_1 = require("./plugins/vue-template");
function getLanguageServicePlugins(host, apis, settings) {
    // plugins
    const _tsPlugin = (0, typescript_1.default)();
    const tsPlugin = (() => {
        let context;
        const autoImportPositions = new WeakSet();
        return Object.assign(Object.assign({}, _tsPlugin), { setup(_context) {
                var _a;
                (_a = _tsPlugin.setup) === null || _a === void 0 ? void 0 : _a.call(_tsPlugin, _context);
                context = _context;
            },
            resolveEmbeddedRange(range) {
                if (autoImportPositions.has(range.start) && autoImportPositions.has(range.end))
                    return range;
            }, complete: Object.assign(Object.assign({}, _tsPlugin.complete), { on(document, position, context) {
                    return __awaiter(this, void 0, void 0, function* () {
                        const result = yield _tsPlugin.complete.on(document, position, context);
                        if (result) {
                            for (const [_, map] of apis.context.documents.getMapsByVirtualFileUri(document.uri)) {
                                const virtualFile = apis.context.documents.getRootFileBySourceFileUri(map.sourceFileDocument.uri);
                                if (virtualFile instanceof vue.VueFile) {
                                    if (map.toSourcePosition(position, data => typeof data.completion === 'object' && !!data.completion.autoImportOnly)) {
                                        result.items.forEach(item => {
                                            item.data.__isComponentAutoImport = true;
                                        });
                                    }
                                }
                            }
                        }
                        return result;
                    });
                },
                resolve(item) {
                    var _a, _b, _c, _d, _e, _f;
                    return __awaiter(this, void 0, void 0, function* () {
                        item = yield _tsPlugin.complete.resolve(item);
                        if (((_a = item.textEdit) === null || _a === void 0 ? void 0 : _a.newText) && /\w*Vue$/.test(item.textEdit.newText)
                            && ((_b = item.additionalTextEdits) === null || _b === void 0 ? void 0 : _b.length) === 1 && item.additionalTextEdits[0].newText.indexOf('import ' + item.textEdit.newText + ' from ') >= 0
                            && ((_d = yield ((_c = context.env.configurationHost) === null || _c === void 0 ? void 0 : _c.getConfiguration('volar.completion.normalizeComponentAutoImportName'))) !== null && _d !== void 0 ? _d : true)) {
                            let newName = item.textEdit.newText.slice(0, -'Vue'.length);
                            newName = newName[0].toUpperCase() + newName.substring(1);
                            item.additionalTextEdits[0].newText = item.additionalTextEdits[0].newText.replace('import ' + item.textEdit.newText + ' from ', 'import ' + newName + ' from ');
                            item.textEdit.newText = newName;
                        }
                        const data = item.data;
                        if (((_e = item.data) === null || _e === void 0 ? void 0 : _e.__isComponentAutoImport) && data && ((_f = item.additionalTextEdits) === null || _f === void 0 ? void 0 : _f.length) && item.textEdit) {
                            for (const [_, map] of apis.context.documents.getMapsByVirtualFileUri(data.uri)) {
                                const virtualFile = apis.context.documents.getRootFileBySourceFileUri(map.sourceFileDocument.uri);
                                if (virtualFile instanceof vue.VueFile) {
                                    const sfc = virtualFile.sfc;
                                    const componentName = item.textEdit.newText;
                                    const textDoc = apis.context.documents.getDocumentByFileName(virtualFile.snapshot, virtualFile.fileName);
                                    if (sfc.scriptAst && sfc.script) {
                                        const ts = context.typescript.module;
                                        const _scriptRanges = vue.scriptRanges.parseScriptRanges(ts, sfc.scriptAst, !!sfc.scriptSetup, true);
                                        const exportDefault = _scriptRanges.exportDefault;
                                        if (exportDefault) {
                                            // https://github.com/microsoft/TypeScript/issues/36174
                                            const printer = ts.createPrinter();
                                            if (exportDefault.componentsOption && exportDefault.componentsOptionNode) {
                                                const newNode = Object.assign(Object.assign({}, exportDefault.componentsOptionNode), { properties: [
                                                        ...exportDefault.componentsOptionNode.properties,
                                                        ts.factory.createShorthandPropertyAssignment(componentName),
                                                    ] });
                                                const printText = printer.printNode(ts.EmitHint.Expression, newNode, sfc.scriptAst);
                                                const editRange = vscode.Range.create(textDoc.positionAt(sfc.script.startTagEnd + exportDefault.componentsOption.start), textDoc.positionAt(sfc.script.startTagEnd + exportDefault.componentsOption.end));
                                                autoImportPositions.add(editRange.start);
                                                autoImportPositions.add(editRange.end);
                                                item.additionalTextEdits.push(vscode.TextEdit.replace(editRange, unescape(printText.replace(/\\u/g, '%u'))));
                                            }
                                            else if (exportDefault.args && exportDefault.argsNode) {
                                                const newNode = Object.assign(Object.assign({}, exportDefault.argsNode), { properties: [
                                                        ...exportDefault.argsNode.properties,
                                                        ts.factory.createShorthandPropertyAssignment(`components: { ${componentName} }`),
                                                    ] });
                                                const printText = printer.printNode(ts.EmitHint.Expression, newNode, sfc.scriptAst);
                                                const editRange = vscode.Range.create(textDoc.positionAt(sfc.script.startTagEnd + exportDefault.args.start), textDoc.positionAt(sfc.script.startTagEnd + exportDefault.args.end));
                                                autoImportPositions.add(editRange.start);
                                                autoImportPositions.add(editRange.end);
                                                item.additionalTextEdits.push(vscode.TextEdit.replace(editRange, unescape(printText.replace(/\\u/g, '%u'))));
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        return item;
                    });
                } }) });
    })();
    const vuePlugin = (0, vue_1.default)({
        getVueFile(document) {
            const virtualFile = apis.context.documents.getVirtualFileByUri(document.uri);
            if (virtualFile instanceof vue_language_core_1.VueFile) {
                return virtualFile;
            }
        }
    });
    const cssPlugin = (0, css_1.default)();
    const jsonPlugin = (0, json_1.default)(settings === null || settings === void 0 ? void 0 : settings.json);
    const emmetPlugin = (0, emmet_1.default)();
    const autoDotValuePlugin = (0, vue_autoinsert_dotvalue_1.default)();
    const referencesCodeLensPlugin = (0, vue_codelens_references_1.default)({
        documents: apis.context.documents,
        findReference: apis.findReferences,
    });
    const htmlPugConversionsPlugin = (0, vue_convert_htmlpug_1.default)({
        documents: apis.context.documents,
    });
    const scriptSetupConversionsPlugin = (0, vue_convert_scriptsetup_1.default)({
        documents: apis.context.documents,
        doCodeActions: apis.doCodeActions,
        doCodeActionResolve: apis.doCodeActionResolve,
    });
    const refSugarConversionsPlugin = (0, vue_convert_refsugar_1.default)({
        documents: apis.context.documents,
        doCodeActions: apis.doCodeActions,
        doCodeActionResolve: apis.doCodeActionResolve,
        findReferences: apis.findReferences,
        doValidation: apis.doValidation,
        doRename: apis.doRename,
        findTypeDefinition: apis.findTypeDefinition,
    });
    // template plugins
    const _htmlPlugin = (0, html_1.default)();
    const _pugPlugin = (0, pug_1.default)();
    const htmlPlugin = (0, vue_template_1.default)({
        templateLanguagePlugin: _htmlPlugin,
        getScanner: (document) => {
            return _htmlPlugin.getHtmlLs().createScanner(document.getText());
        },
        isSupportedDocument: (document) => document.languageId === 'html',
        vueLsHost: host,
        context: apis.context,
    });
    const pugPlugin = (0, vue_template_1.default)({
        templateLanguagePlugin: _pugPlugin,
        getScanner: (document) => {
            const pugDocument = _pugPlugin.getPugDocument(document);
            if (pugDocument) {
                return _pugPlugin.getPugLs().createScanner(pugDocument);
            }
        },
        isSupportedDocument: (document) => document.languageId === 'jade',
        vueLsHost: host,
        context: apis.context,
    });
    const tsTwoslashQueriesPlugin = (0, typescript_twoslash_queries_1.default)();
    const vueTwoslashQueriesPlugin = (0, vue_twoslash_queries_1.default)({
        documents: apis.context.documents,
    });
    return [
        vuePlugin,
        cssPlugin,
        htmlPlugin,
        pugPlugin,
        jsonPlugin,
        referencesCodeLensPlugin,
        htmlPugConversionsPlugin,
        scriptSetupConversionsPlugin,
        refSugarConversionsPlugin,
        tsPlugin,
        autoDotValuePlugin,
        tsTwoslashQueriesPlugin,
        vueTwoslashQueriesPlugin,
        // put emmet plugin at last to fix https://github.com/johnsoncodehk/volar/issues/1088
        emmetPlugin,
    ];
}
exports.getLanguageServicePlugins = getLanguageServicePlugins;
function createLanguageService(host, env, documentRegistry, settings) {
    const vueLanguageModules = vue.createLanguageModules(host.getTypeScriptModule(), host.getCurrentDirectory(), host.getCompilationSettings(), host.getVueCompilationSettings());
    const core = embedded.createLanguageContext(host, vueLanguageModules);
    const languageServiceContext = embeddedLS.createLanguageServiceContext({
        env,
        host,
        context: core,
        getPlugins() {
            return getLanguageServicePlugins(host, languageService, settings);
        },
        documentRegistry,
    });
    const languageService = embeddedLS.createLanguageService(languageServiceContext);
    return languageService;
}
exports.createLanguageService = createLanguageService;
//# sourceMappingURL=languageService.js.map
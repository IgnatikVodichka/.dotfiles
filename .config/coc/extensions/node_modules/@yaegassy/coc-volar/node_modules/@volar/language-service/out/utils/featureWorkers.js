var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.languageFeatureWorker = exports.documentArgFeatureWorker = exports.documentFeatureWorker = void 0;
const definePlugin_1 = require("./definePlugin");
function documentFeatureWorker(context, document, isValidSourceMap, worker, transform, combineResult) {
    return __awaiter(this, void 0, void 0, function* () {
        return documentArgFeatureWorker(context, document, true, isValidSourceMap, () => [true], worker, transform, combineResult);
    });
}
exports.documentFeatureWorker = documentFeatureWorker;
function documentArgFeatureWorker(context, document, arg, isValidSourceMap, transformArg, worker, transform, combineResult) {
    return __awaiter(this, void 0, void 0, function* () {
        context.update(document);
        const virtualFile = context.documents.getRootFileBySourceFileUri(document.uri);
        let results = [];
        if (virtualFile) {
            yield (0, definePlugin_1.visitEmbedded)(context.documents, virtualFile, (file, map) => __awaiter(this, void 0, void 0, function* () {
                if (!isValidSourceMap(file, map))
                    return true;
                context.prepareLanguageServices(map.virtualFileDocument);
                for (const mappedArg of transformArg(arg, map)) {
                    for (const plugin of context.plugins) {
                        const embeddedResult = yield worker(plugin, map.virtualFileDocument, mappedArg);
                        if (!embeddedResult)
                            continue;
                        const result = yield transform(embeddedResult, map);
                        if (!result)
                            continue;
                        results.push(result);
                        if (!combineResult)
                            return false;
                    }
                }
                return true;
            }));
        }
        else if (results.length === 0 || !!combineResult) {
            context.prepareLanguageServices(document);
            for (const plugin of context.plugins) {
                const result = yield worker(plugin, document, arg);
                if (!result)
                    continue;
                results.push(result);
                if (!combineResult)
                    break;
            }
        }
        if (combineResult && results.length > 0) {
            return combineResult(results);
        }
        else if (results.length > 0) {
            return results[0];
        }
    });
}
exports.documentArgFeatureWorker = documentArgFeatureWorker;
function languageFeatureWorker(context, uri, arg, transformArg, worker, transform, combineResult, reportProgress) {
    return __awaiter(this, void 0, void 0, function* () {
        const document = context.getTextDocument(uri);
        const virtualFile = context.documents.getRootFileBySourceFileUri(uri);
        let results = [];
        if (virtualFile) {
            yield (0, definePlugin_1.visitEmbedded)(context.documents, virtualFile, (file, map) => __awaiter(this, void 0, void 0, function* () {
                for (const mappedArg of transformArg(arg, map, file)) {
                    for (const plugin of context.plugins) {
                        const embeddedResult = yield worker(plugin, map.virtualFileDocument, mappedArg, map, file);
                        if (!embeddedResult)
                            continue;
                        const result = transform(embeddedResult, map);
                        if (!result)
                            continue;
                        results.push(result);
                        if (!combineResult)
                            return false;
                        const isEmptyArray = Array.isArray(result) && result.length === 0;
                        if (reportProgress && !isEmptyArray) {
                            reportProgress(combineResult(results));
                        }
                    }
                }
                return true;
            }));
        }
        else if (document && (results.length === 0 || !!combineResult)) {
            for (const plugin of context.plugins) {
                const embeddedResult = yield worker(plugin, document, arg, undefined, undefined);
                if (!embeddedResult)
                    continue;
                const result = transform(embeddedResult, undefined);
                if (!result)
                    continue;
                results.push(result);
                if (!combineResult)
                    break;
                const isEmptyArray = Array.isArray(result) && result.length === 0;
                if (reportProgress && !isEmptyArray) {
                    reportProgress(combineResult(results));
                }
            }
        }
        if (combineResult && results.length > 0) {
            return combineResult(results);
        }
        else if (results.length > 0) {
            return results[0];
        }
    });
}
exports.languageFeatureWorker = languageFeatureWorker;
//# sourceMappingURL=featureWorkers.js.map
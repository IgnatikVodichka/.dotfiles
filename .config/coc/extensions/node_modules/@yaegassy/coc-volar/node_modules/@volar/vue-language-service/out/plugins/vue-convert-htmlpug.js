var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode-languageserver-protocol");
const html2pug_1 = require("@johnsoncodehk/html2pug");
const vue = require("@volar/vue-language-core");
const toggleConvertCommand = 'htmlPugConversions.toggle';
function default_1(options) {
    let context;
    return {
        setup(_context) {
            context = _context;
        },
        codeLens: {
            on(document) {
                return worker(document.uri, (vueSourceFile) => __awaiter(this, void 0, void 0, function* () {
                    var _a, _b;
                    const isEnabled = (_b = yield ((_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration('volar.codeLens.pugTools'))) !== null && _b !== void 0 ? _b : true;
                    if (!isEnabled)
                        return;
                    const descriptor = vueSourceFile.sfc;
                    if (descriptor.template && (descriptor.template.lang === 'html' || descriptor.template.lang === 'pug')) {
                        return [{
                                range: {
                                    start: document.positionAt(descriptor.template.start),
                                    end: document.positionAt(descriptor.template.startTagEnd),
                                },
                                command: {
                                    title: 'pug ' + (descriptor.template.lang === 'pug' ? '☑' : '☐'),
                                    command: toggleConvertCommand,
                                    arguments: [document.uri],
                                },
                            }];
                    }
                }));
            },
        },
        doExecuteCommand(command, args, host) {
            if (command === toggleConvertCommand) {
                const [uri] = args;
                return worker(uri, (vueFile) => {
                    const document = options.documents.getDocumentByFileName(vueFile.snapshot, vueFile.fileName);
                    const desc = vueFile.sfc;
                    if (!desc.template)
                        return;
                    const lang = desc.template.lang;
                    if (lang === 'html') {
                        const pug = (0, html2pug_1.htmlToPug)(desc.template.content) + '\n';
                        const newTemplate = `<template lang="pug">` + pug;
                        const range = vscode.Range.create(document.positionAt(desc.template.start), document.positionAt(desc.template.startTagEnd + desc.template.content.length));
                        const textEdit = vscode.TextEdit.replace(range, newTemplate);
                        host.applyEdit({ changes: { [document.uri]: [textEdit] } });
                    }
                    else if (lang === 'pug') {
                        const html = (0, html2pug_1.pugToHtml)(desc.template.content);
                        const newTemplate = `<template>\n` + html + `\n`;
                        const range = vscode.Range.create(document.positionAt(desc.template.start), document.positionAt(desc.template.startTagEnd + desc.template.content.length));
                        const textEdit = vscode.TextEdit.replace(range, newTemplate);
                        host.applyEdit({ changes: { [document.uri]: [textEdit] } });
                    }
                });
            }
        },
    };
    function worker(uri, callback) {
        const virtualFile = options.documents.getVirtualFileByUri(uri);
        if (!(virtualFile instanceof vue.VueFile))
            return;
        return callback(virtualFile);
    }
}
exports.default = default_1;
//# sourceMappingURL=vue-convert-htmlpug.js.map
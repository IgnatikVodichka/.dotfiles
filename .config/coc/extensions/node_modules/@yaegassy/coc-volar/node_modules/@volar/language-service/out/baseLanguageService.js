Object.defineProperty(exports, "__esModule", { value: true });
exports.createLanguageService = exports.createLanguageServiceContext = void 0;
const shared = require("@volar/shared");
const tsFaster = require("@volar/typescript-faster");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const documents_1 = require("./documents");
const autoInsert = require("./languageFeatures/autoInsert");
const callHierarchy = require("./languageFeatures/callHierarchy");
const codeActionResolve = require("./languageFeatures/codeActionResolve");
const codeActions = require("./languageFeatures/codeActions");
const codeLens = require("./languageFeatures/codeLens");
const codeLensResolve = require("./languageFeatures/codeLensResolve");
const completions = require("./languageFeatures/complete");
const completionResolve = require("./languageFeatures/completeResolve");
const definition = require("./languageFeatures/definition");
const documentHighlight = require("./languageFeatures/documentHighlights");
const documentLink = require("./languageFeatures/documentLinks");
const semanticTokens = require("./languageFeatures/documentSemanticTokens");
const executeCommand = require("./languageFeatures/executeCommand");
const fileReferences = require("./languageFeatures/fileReferences");
const fileRename = require("./languageFeatures/fileRename");
const hover = require("./languageFeatures/hover");
const inlayHints = require("./languageFeatures/inlayHints");
const references = require("./languageFeatures/references");
const rename = require("./languageFeatures/rename");
const renamePrepare = require("./languageFeatures/renamePrepare");
const signatureHelp = require("./languageFeatures/signatureHelp");
const diagnostics = require("./languageFeatures/validation");
const workspaceSymbol = require("./languageFeatures/workspaceSymbols");
function createLanguageServiceContext(options) {
    const ts = options.host.getTypeScriptModule();
    const tsLs = ts.createLanguageService(options.context.typescript.languageServiceHost, options.documentRegistry);
    tsFaster.decorate(ts, options.context.typescript.languageServiceHost, tsLs);
    let plugins;
    const pluginContext = {
        env: options.env,
        typescript: {
            module: options.host.getTypeScriptModule(),
            languageServiceHost: options.context.typescript.languageServiceHost,
            languageService: tsLs,
        },
    };
    const textDocumentMapper = (0, documents_1.createDocumentsAndSourceMaps)(options.context.virtualFiles);
    const documents = new WeakMap();
    const documentVersions = new Map();
    const context = {
        host: options.host,
        core: options.context,
        get plugins() {
            var _a;
            if (!plugins) {
                plugins = options.getPlugins();
                for (const plugin of plugins) {
                    (_a = plugin.setup) === null || _a === void 0 ? void 0 : _a.call(plugin, pluginContext);
                }
            }
            return plugins;
        },
        pluginContext,
        typescriptLanguageService: tsLs,
        documents: textDocumentMapper,
        getTextDocument,
    };
    return context;
    function getTextDocument(uri) {
        var _a;
        const fileName = shared.getPathOfUri(uri);
        const scriptSnapshot = options.host.getScriptSnapshot(fileName);
        if (scriptSnapshot) {
            let document = documents.get(scriptSnapshot);
            if (!document) {
                const newVersion = ((_a = documentVersions.get(uri.toLowerCase())) !== null && _a !== void 0 ? _a : 0) + 1;
                documentVersions.set(uri.toLowerCase(), newVersion);
                document = vscode_languageserver_textdocument_1.TextDocument.create(uri, shared.syntaxToLanguageId(uri.substring(uri.lastIndexOf('.') + 1)), newVersion, scriptSnapshot.getText(0, scriptSnapshot.getLength()));
                documents.set(scriptSnapshot, document);
            }
            return document;
        }
    }
}
exports.createLanguageServiceContext = createLanguageServiceContext;
function createLanguageService(context) {
    return {
        doValidation: diagnostics.register(context),
        findReferences: references.register(context),
        findFileReferences: fileReferences.register(context),
        findDefinition: definition.register(context, 'findDefinition', data => !!data.definition, data => !!data.definition),
        findTypeDefinition: definition.register(context, 'findTypeDefinition', data => !!data.definition, data => !!data.definition),
        findImplementations: definition.register(context, 'findImplementations', data => !!data.references, () => false),
        prepareRename: renamePrepare.register(context),
        doRename: rename.register(context),
        getEditsForFileRename: fileRename.register(context),
        getSemanticTokens: semanticTokens.register(context),
        doHover: hover.register(context),
        doComplete: completions.register(context),
        doCodeActions: codeActions.register(context),
        doCodeActionResolve: codeActionResolve.register(context),
        doCompletionResolve: completionResolve.register(context),
        getSignatureHelp: signatureHelp.register(context),
        doCodeLens: codeLens.register(context),
        doCodeLensResolve: codeLensResolve.register(context),
        findDocumentHighlights: documentHighlight.register(context),
        findDocumentLinks: documentLink.register(context),
        findWorkspaceSymbols: workspaceSymbol.register(context),
        doAutoInsert: autoInsert.register(context),
        doExecuteCommand: executeCommand.register(context),
        getInlayHints: inlayHints.register(context),
        callHierarchy: callHierarchy.register(context),
        dispose: () => context.typescriptLanguageService.dispose(),
        context,
    };
}
exports.createLanguageService = createLanguageService;
//# sourceMappingURL=baseLanguageService.js.map
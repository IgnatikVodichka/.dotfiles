Object.defineProperty(exports, "__esModule", { value: true });
exports.createSyntaxServicesHost = void 0;
const embedded = require("@volar/language-service");
const vscode_uri_1 = require("vscode-uri");
const serverConfig_1 = require("./utils/serverConfig");
function createSyntaxServicesHost(runtimeEnv, plugins, ts, configHost, initOptions) {
    const services = new Map();
    const untitledService = create(vscode_uri_1.URI.from({ scheme: 'untitled' }));
    return {
        add,
        remove,
        get,
    };
    function add(rootUri) {
        services.set(rootUri.toString(), create(rootUri));
    }
    function remove(rootUri) {
        services.delete(rootUri.toString());
    }
    function get(documentUri) {
        for (const [rootUri, service] of services) {
            if (documentUri.startsWith(rootUri)) {
                return service;
            }
        }
        return untitledService;
    }
    function create(rootUri) {
        const env = {
            rootUri,
            configurationHost: configHost,
            fileSystemProvider: runtimeEnv.fileSystemProvide,
        };
        const serverConfig = (0, serverConfig_1.loadServerConfig)(rootUri.fsPath, initOptions.configFilePath);
        const serviceContext = embedded.createDocumentServiceContext({
            ts,
            env,
            getLanguageModules() {
                return plugins.map(plugin => { var _a, _b, _c; return (_c = (_b = (_a = plugin.syntacticService) === null || _a === void 0 ? void 0 : _a.getLanguageModules) === null || _b === void 0 ? void 0 : _b.call(_a, ts, env)) !== null && _c !== void 0 ? _c : []; }).flat();
            },
            getPlugins() {
                var _a;
                return [
                    ...(_a = serverConfig === null || serverConfig === void 0 ? void 0 : serverConfig.plugins) !== null && _a !== void 0 ? _a : [],
                    ...plugins.map(plugin => { var _a, _b, _c; return (_c = (_b = (_a = plugin.syntacticService) === null || _a === void 0 ? void 0 : _a.getServicePlugins) === null || _b === void 0 ? void 0 : _b.call(_a, serviceContext)) !== null && _c !== void 0 ? _c : []; }).flat(),
                ];
            },
        });
        return embedded.createDocumentService(serviceContext);
    }
}
exports.createSyntaxServicesHost = createSyntaxServicesHost;
//# sourceMappingURL=syntaxServicesHost.js.map
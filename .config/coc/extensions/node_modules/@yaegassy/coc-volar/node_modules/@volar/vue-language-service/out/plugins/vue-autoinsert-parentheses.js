var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("vscode-languageserver-protocol");
const vue_autoinsert_dotvalue_1 = require("./vue-autoinsert-dotvalue");
const embedded = require("@volar/language-core");
function default_1(options) {
    let context;
    return {
        setup(_context) {
            context = _context;
        },
        doAutoInsert(document, position, options_2) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const enabled = (_b = yield ((_a = context.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration('volar.autoWrapParentheses'))) !== null && _b !== void 0 ? _b : false;
                if (!enabled)
                    return;
                if (!(0, vue_autoinsert_dotvalue_1.isCharacterTyping)(document, options_2))
                    return;
                const vueFile = options.getVueFile(document);
                if (!vueFile)
                    return;
                let templateFormatScript;
                embedded.forEachEmbeddedFile(vueFile, embedded => {
                    if (embedded.fileName.endsWith('.__VLS_template_format.ts')) {
                        templateFormatScript = embedded;
                    }
                });
                if (!templateFormatScript)
                    return;
                const offset = document.offsetAt(position);
                for (const mappedRange of templateFormatScript.mappings) {
                    if (mappedRange.sourceRange[1] === offset) {
                        const text = document.getText().substring(mappedRange.sourceRange[0], mappedRange.sourceRange[1]);
                        const ts = context.typescript.module;
                        const ast = ts.createSourceFile(templateFormatScript.fileName, text, ts.ScriptTarget.Latest);
                        if (ast.statements.length === 1) {
                            const statement = ast.statements[0];
                            if (ts.isExpressionStatement(statement)
                                && ((ts.isAsExpression(statement.expression)
                                    && ts.isTypeReferenceNode(statement.expression.type)
                                    && ts.isIdentifier(statement.expression.type.typeName)
                                    && statement.expression.type.typeName.text)
                                    || (ts.isBinaryExpression(statement.expression)
                                        && statement.expression.right.getText(ast)
                                        && statement.expression.operatorToken.kind === ts.SyntaxKind.InstanceOfKeyword)
                                    || (ts.isTypeOfExpression(statement.expression)
                                        && statement.expression.expression.getText(ast)))) {
                                // https://code.visualstudio.com/docs/editor/userdefinedsnippets#_grammar
                                const escapedText = text
                                    .replaceAll('\\', '\\\\')
                                    .replaceAll('$', '\\$')
                                    .replaceAll('}', '\\}');
                                return vscode.TextEdit.replace({
                                    start: document.positionAt(mappedRange.sourceRange[0]),
                                    end: document.positionAt(mappedRange.sourceRange[1]),
                                }, '(' + escapedText + '$0' + ')');
                            }
                        }
                    }
                }
            });
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=vue-autoinsert-parentheses.js.map
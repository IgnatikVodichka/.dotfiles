var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const protocol_1 = require("../../protocol");
const language_core_1 = require("@volar/language-core");
function register(connection, projects) {
    connection.onNotification(protocol_1.ReportStats.type, () => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        for (const [rootUri, _workspace] of projects.workspaces) {
            connection.console.log('workspace: ' + rootUri);
            const workspace = yield _workspace;
            connection.console.log('documentRegistry stats: ' + workspace.documentRegistry.reportStats());
            connection.console.log('');
            connection.console.log('tsconfig: inferred');
            const _inferredProject = workspace.getInferredProjectDontCreate();
            if (_inferredProject) {
                connection.console.log('loaded: true');
                const inferredProject = yield _inferredProject;
                connection.console.log('largest 10 files:');
                for (const script of [...inferredProject.scripts.values()]
                    .sort((a, b) => { var _a, _b, _c, _d; return ((_b = (_a = b.snapshot) === null || _a === void 0 ? void 0 : _a.getLength()) !== null && _b !== void 0 ? _b : 0) - ((_d = (_c = a.snapshot) === null || _c === void 0 ? void 0 : _c.getLength()) !== null && _d !== void 0 ? _d : 0); })
                    .slice(0, 10)) {
                    connection.console.log('  - ' + script.fileName);
                    connection.console.log(`    size: ${(_a = script.snapshot) === null || _a === void 0 ? void 0 : _a.getLength()}`);
                }
                connection.console.log('files:');
                for (const script of inferredProject.scripts.values()) {
                    connection.console.log('  - ' + script.fileName);
                    connection.console.log(`    size: ${(_b = script.snapshot) === null || _b === void 0 ? void 0 : _b.getLength()}`);
                    connection.console.log(`    ref counts: "${(_d = (_c = workspace.documentRegistry).getLanguageServiceRefCounts) === null || _d === void 0 ? void 0 : _d.call(_c, script.fileName, (_f = (_e = inferredProject.languageServiceHost).getScriptKind) === null || _f === void 0 ? void 0 : _f.call(_e, script.fileName))})"`);
                }
            }
            else {
                connection.console.log('loaded: false');
            }
            connection.console.log('');
            for (const _project of workspace.projects.values()) {
                const project = yield _project;
                connection.console.log('tsconfig: ' + project.tsConfig);
                connection.console.log('loaded: ' + !!project.getLanguageServiceDontCreate());
                connection.console.log('largest 10 files:');
                for (const script of [...project.scripts.values()]
                    .sort((a, b) => { var _a, _b, _c, _d; return ((_b = (_a = b.snapshot) === null || _a === void 0 ? void 0 : _a.getLength()) !== null && _b !== void 0 ? _b : 0) - ((_d = (_c = a.snapshot) === null || _c === void 0 ? void 0 : _c.getLength()) !== null && _d !== void 0 ? _d : 0); })
                    .slice(0, 10)) {
                    connection.console.log('  - ' + script.fileName);
                    connection.console.log(`    size: ${(_g = script.snapshot) === null || _g === void 0 ? void 0 : _g.getLength()}`);
                }
                connection.console.log('files:');
                for (const script of project.scripts.values()) {
                    connection.console.log('  - ' + script.fileName);
                    connection.console.log(`    size: ${(_h = script.snapshot) === null || _h === void 0 ? void 0 : _h.getLength()}`);
                    connection.console.log(`    ref counts: "${(_k = (_j = workspace.documentRegistry).getLanguageServiceRefCounts) === null || _k === void 0 ? void 0 : _k.call(_j, script.fileName, (_m = (_l = project.languageServiceHost).getScriptKind) === null || _m === void 0 ? void 0 : _m.call(_l, script.fileName))})"`);
                }
            }
            connection.console.log('');
        }
    }));
    connection.onRequest(protocol_1.GetMatchTsConfigRequest.type, (params) => __awaiter(this, void 0, void 0, function* () {
        const project = (yield projects.getProject(params.uri));
        if (project === null || project === void 0 ? void 0 : project.tsconfig) {
            return { uri: shared.getUriByPath(project.tsconfig) };
        }
    }));
    connection.onRequest(protocol_1.GetVirtualFileNamesRequest.type, (document) => __awaiter(this, void 0, void 0, function* () {
        var _o, _p;
        const project = yield projects.getProject(document.uri);
        const fileNames = [];
        if (project) {
            const sourceFile = (_p = (_o = project.project) === null || _o === void 0 ? void 0 : _o.getLanguageService().context.core.virtualFiles.get(shared.getPathOfUri(document.uri))) === null || _p === void 0 ? void 0 : _p[1];
            if (sourceFile) {
                (0, language_core_1.forEachEmbeddedFile)(sourceFile, e => {
                    if (e.snapshot.getLength() && e.kind === 1) {
                        fileNames.push(e.fileName);
                    }
                });
            }
        }
        return fileNames;
    }));
    connection.onRequest(protocol_1.GetVirtualFileRequest.type, (params) => __awaiter(this, void 0, void 0, function* () {
        var _q, _r, _s;
        const project = yield projects.getProject(params.sourceFileUri);
        if (project) {
            const sourceAndVirtual = (_q = project.project) === null || _q === void 0 ? void 0 : _q.getLanguageService().context.core.virtualFiles.getSourceByVirtualFileName(params.virtualFileName);
            if (sourceAndVirtual) {
                const virtualFile = sourceAndVirtual[2];
                const mappings = {};
                for (const mapping of virtualFile.mappings) {
                    const sourceUri = shared.getUriByPath((_r = mapping.source) !== null && _r !== void 0 ? _r : sourceAndVirtual[0]);
                    (_s = mappings[sourceUri]) !== null && _s !== void 0 ? _s : (mappings[sourceUri] = []);
                    mappings[sourceUri].push(mapping);
                }
                return {
                    content: virtualFile.snapshot.getText(0, virtualFile.snapshot.getLength()),
                    mappings,
                };
            }
        }
    }));
    connection.onNotification(protocol_1.ReloadProjectNotification.type, () => {
        projects.reloadProject();
    });
    connection.onNotification(protocol_1.WriteVirtualFilesNotification.type, (params) => __awaiter(this, void 0, void 0, function* () {
        var _t;
        const fs = yield Promise.resolve().then(() => require('fs'));
        const project = yield projects.getProject(params.uri);
        if (project) {
            const ls = (_t = (yield project.project)) === null || _t === void 0 ? void 0 : _t.getLanguageServiceDontCreate();
            if (ls) {
                const sourceFiles = new Set(ls.context.host.getScriptFileNames());
                for (const virtualFile of ls.context.core.typescript.languageServiceHost.getScriptFileNames()) {
                    if (virtualFile.startsWith(ls.context.host.getCurrentDirectory()) && !sourceFiles.has(virtualFile)) {
                        const snapshot = ls.context.core.typescript.languageServiceHost.getScriptSnapshot(virtualFile);
                        if (snapshot) {
                            fs.writeFile(virtualFile, snapshot.getText(0, snapshot.getLength()), () => { });
                        }
                    }
                }
            }
        }
    }));
}
exports.register = register;
//# sourceMappingURL=customFeatures.js.map
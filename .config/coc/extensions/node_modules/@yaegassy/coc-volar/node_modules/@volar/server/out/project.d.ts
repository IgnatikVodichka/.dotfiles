import * as shared from '@volar/shared';
import * as vue from 'vscode-vue-languageservice';
import type * as ts from 'typescript/lib/tsserverlibrary';
import type { TextDocument } from 'vscode-languageserver-textdocument';
import * as vscode from 'vscode-languageserver';
import type { createLsConfigs } from './configs';
export declare type Project = ReturnType<typeof createProject>;
export declare const fileRenamings: Set<Promise<void>>;
export declare const renameFileContentCache: Map<string, string>;
export declare function createProject(ts: vue.Modules['typescript'], options: shared.ServerInitializationOptions, rootPath: string, tsConfig: string | ts.CompilerOptions, tsLocalized: ts.MapLike<string> | undefined, documents: vscode.TextDocuments<TextDocument>, connection: vscode.Connection, lsConfigs: ReturnType<typeof createLsConfigs> | undefined): Promise<{
    onWorkspaceFilesChanged: (changes: vscode.FileEvent[]) => Promise<void>;
    onDocumentUpdated: (document: TextDocument) => Promise<void>;
    getLanguageService: () => Promise<{
        doValidation: (uri: string, response?: ((result: vscode.Diagnostic[]) => void) | undefined, isCancel?: (() => Promise<boolean>) | undefined) => Promise<Promise<vscode.Diagnostic[] | undefined>>;
        findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | vscode.Location[]>;
        findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[]>;
        findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[]>;
        callHierarchy: {
            doPrepare: (uri: string, position: vscode.Position) => Promise<vscode.CallHierarchyItem[]>;
            getIncomingCalls: (item: vscode.CallHierarchyItem) => Promise<vscode.CallHierarchyIncomingCall[]>;
            getOutgoingCalls: (item: vscode.CallHierarchyItem) => Promise<vscode.CallHierarchyOutgoingCall[]>;
        };
        prepareRename: (uri: string, position: vscode.Position) => Promise<vscode.Range | vscode.ResponseError<void> | undefined>;
        doRename: (uri: string, position: vscode.Position, newName: string) => Promise<Promise<vscode.WorkspaceEdit | undefined>>;
        getEditsForFileRename: (oldUri: string, newUri: string) => Promise<Promise<vscode.WorkspaceEdit | undefined>>;
        getSemanticTokens: (uri: string, range?: vscode.Range | undefined, cancle?: vscode.CancellationToken | undefined, resultProgress?: vscode.ResultProgressReporter<vscode.SemanticTokensPartialResult> | undefined) => Promise<vscode.SemanticTokens | undefined>;
        doHover: (uri: string, position: vscode.Position) => Promise<Promise<vscode.Hover | undefined>>;
        doComplete: (uri: string, position: vscode.Position, context?: vscode.CompletionContext | undefined, isEnabledComponentAutoImport?: (() => Promise<boolean>) | undefined, getNameCases?: ((uri: string) => Promise<{
            tagNameCase: "both" | "kebabCase" | "pascalCase";
            attrNameCase: "kebabCase" | "camelCase";
        }>) | undefined) => Promise<Promise<import("vscode-languageserver-types").CompletionList | undefined>>;
        getCodeActions: (uri: string, range: vscode.Range, context: vscode.CodeActionContext) => Promise<Promise<vscode.CodeAction[]>>;
        doCodeActionResolve: (codeAction: import("vscode-languageserver-types").CodeAction) => Promise<Promise<import("vscode-languageserver-types").CodeAction>>;
        doCompletionResolve: (item: vscode.CompletionItem, newPosition?: vscode.Position | undefined) => Promise<Promise<vscode.CompletionItem>>;
        doCodeLensResolve: (codeLens: vscode.CodeLens, canShowReferences?: boolean | undefined) => Promise<vscode.CodeLens>;
        getSignatureHelp: (uri: string, position: vscode.Position, context?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
        getCodeLens: (uri: string, options?: {
            references: boolean;
            pugTool: boolean;
            scriptSetupTool: boolean;
        } | undefined) => Promise<vscode.CodeLens[] | undefined>;
        findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
        findDocumentLinks: (uri: string) => Promise<Promise<vscode.DocumentLink[] | undefined>>;
        findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
        dispose: () => void;
        updateHtmlCustomData: (customData: {
            [id: string]: import("vscode-html-languageservice").HTMLDataV1;
        }) => void;
        updateCssCustomData: (customData: import("vscode-css-languageservice").CSSDataV1[]) => void;
        __internal__: {
            rootPath: string;
            readonly tsPlugin: Partial<ts.LanguageService>;
            readonly tsProgramProxy: ts.Program;
            context: vue.ApiLanguageServiceContext;
            onInitProgress(cb: (p: number) => void): void;
            getLocalTypesFiles: (lsType: "script" | "template") => {
                fileNames: string[];
                code: string;
            };
            getContext: () => Promise<vue.ApiLanguageServiceContext>;
            getD3: (document: TextDocument) => Promise<Promise<string>>;
            executeCommand: (uri: string, command: string, args: any[] | undefined, connection: vscode.Connection) => Promise<Promise<void>>;
            detectTagNameCase: (uri: string) => Promise<{
                tag: "both" | "kebabCase" | "pascalCase" | "unsure";
                attr: "kebabCase" | "camelCase" | "unsure";
            }>;
            doRefAutoClose: (document: TextDocument, position: vscode.Position) => Promise<string | null | undefined>;
        };
    }>;
    getLanguageServiceDontCreate: () => Promise<{
        doValidation: (uri: string, response?: ((result: vscode.Diagnostic[]) => void) | undefined, isCancel?: (() => Promise<boolean>) | undefined) => Promise<Promise<vscode.Diagnostic[] | undefined>>;
        findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | vscode.Location[]>;
        findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[]>;
        findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[]>;
        callHierarchy: {
            doPrepare: (uri: string, position: vscode.Position) => Promise<vscode.CallHierarchyItem[]>;
            getIncomingCalls: (item: vscode.CallHierarchyItem) => Promise<vscode.CallHierarchyIncomingCall[]>;
            getOutgoingCalls: (item: vscode.CallHierarchyItem) => Promise<vscode.CallHierarchyOutgoingCall[]>;
        };
        prepareRename: (uri: string, position: vscode.Position) => Promise<vscode.Range | vscode.ResponseError<void> | undefined>;
        doRename: (uri: string, position: vscode.Position, newName: string) => Promise<Promise<vscode.WorkspaceEdit | undefined>>;
        getEditsForFileRename: (oldUri: string, newUri: string) => Promise<Promise<vscode.WorkspaceEdit | undefined>>;
        getSemanticTokens: (uri: string, range?: vscode.Range | undefined, cancle?: vscode.CancellationToken | undefined, resultProgress?: vscode.ResultProgressReporter<vscode.SemanticTokensPartialResult> | undefined) => Promise<vscode.SemanticTokens | undefined>;
        doHover: (uri: string, position: vscode.Position) => Promise<Promise<vscode.Hover | undefined>>;
        doComplete: (uri: string, position: vscode.Position, context?: vscode.CompletionContext | undefined, isEnabledComponentAutoImport?: (() => Promise<boolean>) | undefined, getNameCases?: ((uri: string) => Promise<{
            tagNameCase: "both" | "kebabCase" | "pascalCase";
            attrNameCase: "kebabCase" | "camelCase";
        }>) | undefined) => Promise<Promise<import("vscode-languageserver-types").CompletionList | undefined>>;
        getCodeActions: (uri: string, range: vscode.Range, context: vscode.CodeActionContext) => Promise<Promise<vscode.CodeAction[]>>;
        doCodeActionResolve: (codeAction: import("vscode-languageserver-types").CodeAction) => Promise<Promise<import("vscode-languageserver-types").CodeAction>>;
        doCompletionResolve: (item: vscode.CompletionItem, newPosition?: vscode.Position | undefined) => Promise<Promise<vscode.CompletionItem>>;
        doCodeLensResolve: (codeLens: vscode.CodeLens, canShowReferences?: boolean | undefined) => Promise<vscode.CodeLens>;
        getSignatureHelp: (uri: string, position: vscode.Position, context?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
        getCodeLens: (uri: string, options?: {
            references: boolean;
            pugTool: boolean;
            scriptSetupTool: boolean;
        } | undefined) => Promise<vscode.CodeLens[] | undefined>;
        findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
        findDocumentLinks: (uri: string) => Promise<Promise<vscode.DocumentLink[] | undefined>>;
        findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
        dispose: () => void;
        updateHtmlCustomData: (customData: {
            [id: string]: import("vscode-html-languageservice").HTMLDataV1;
        }) => void;
        updateCssCustomData: (customData: import("vscode-css-languageservice").CSSDataV1[]) => void;
        __internal__: {
            rootPath: string;
            readonly tsPlugin: Partial<ts.LanguageService>;
            readonly tsProgramProxy: ts.Program;
            context: vue.ApiLanguageServiceContext;
            onInitProgress(cb: (p: number) => void): void;
            getLocalTypesFiles: (lsType: "script" | "template") => {
                fileNames: string[];
                code: string;
            };
            getContext: () => Promise<vue.ApiLanguageServiceContext>;
            getD3: (document: TextDocument) => Promise<Promise<string>>;
            executeCommand: (uri: string, command: string, args: any[] | undefined, connection: vscode.Connection) => Promise<Promise<void>>;
            detectTagNameCase: (uri: string) => Promise<{
                tag: "both" | "kebabCase" | "pascalCase" | "unsure";
                attr: "kebabCase" | "camelCase" | "unsure";
            }>;
            doRefAutoClose: (document: TextDocument, position: vscode.Position) => Promise<string | null | undefined>;
        };
    }> | undefined;
    getParsedCommandLine: () => ts.ParsedCommandLine & {
        vueOptions: {
            experimentalCompatMode?: 2 | 3 | undefined;
            experimentalTemplateCompilerOptions?: any;
            experimentalTemplateCompilerOptionsRequirePath?: string | undefined;
        };
    };
    dispose: () => Promise<void>;
}>;
export declare function getScriptText(documents: vscode.TextDocuments<TextDocument>, fileName: string, sys: vue.Modules['typescript']['sys']): string | undefined;

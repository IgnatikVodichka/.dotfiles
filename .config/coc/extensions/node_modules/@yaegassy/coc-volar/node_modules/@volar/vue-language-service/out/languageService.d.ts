import useJsonPlugin from '@volar-plugins/json';
import * as embeddedLS from '@volar/language-service';
import * as vue from '@volar/vue-language-core';
import { LanguageServiceHost } from '@volar/vue-language-core';
import type * as ts from 'typescript/lib/tsserverlibrary';
export interface Settings {
    json?: Parameters<typeof useJsonPlugin>[0];
}
export declare function getLanguageServicePlugins(host: vue.LanguageServiceHost, apis: embeddedLS.LanguageService, settings?: Settings): embeddedLS.LanguageServicePlugin[];
export declare function createLanguageService(host: LanguageServiceHost, env: embeddedLS.LanguageServicePluginContext['env'], documentRegistry?: ts.DocumentRegistry, settings?: Settings): {
    doValidation: (uri: string, token?: embeddedLS.CancellationToken | undefined, response?: ((result: embeddedLS.Diagnostic[]) => void) | undefined) => Promise<embeddedLS.Diagnostic[]>;
    findReferences: (uri: string, position: embeddedLS.Position) => Promise<embeddedLS.Location[] | undefined>;
    findFileReferences: (uri: string) => embeddedLS.NullableResult<embeddedLS.Location[]>;
    findDefinition: (uri: string, position: embeddedLS.Position) => Promise<embeddedLS.LocationLink[] | undefined>;
    findTypeDefinition: (uri: string, position: embeddedLS.Position) => Promise<embeddedLS.LocationLink[] | undefined>;
    findImplementations: (uri: string, position: embeddedLS.Position) => Promise<embeddedLS.LocationLink[] | undefined>;
    prepareRename: (uri: string, position: embeddedLS.Position) => Promise<NonNullable<embeddedLS.Range | embeddedLS.ResponseError<void> | null | undefined> | undefined>;
    doRename: (uri: string, position: embeddedLS.Position, newName: string) => Promise<embeddedLS.WorkspaceEdit | undefined>;
    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<embeddedLS.WorkspaceEdit | undefined>;
    getSemanticTokens: (uri: string, range: embeddedLS.Range | undefined, legend: embeddedLS.SemanticTokensLegend, cancelToken: embeddedLS.CancellationToken, reportProgress?: ((tokens: embeddedLS.SemanticToken[]) => void) | undefined) => Promise<embeddedLS.SemanticToken[] | undefined> | undefined;
    doHover: (uri: string, position: embeddedLS.Position) => Promise<embeddedLS.Hover | undefined>;
    doComplete: (uri: string, position: embeddedLS.Position, completionContext?: embeddedLS.CompletionContext | undefined) => Promise<embeddedLS.CompletionList>;
    doCodeActions: (uri: string, range: embeddedLS.Range, codeActionContext: embeddedLS.CodeActionContext) => Promise<embeddedLS.CodeAction[] | undefined>;
    doCodeActionResolve: (item: embeddedLS.CodeAction) => Promise<embeddedLS.CodeAction>;
    doCompletionResolve: (item: embeddedLS.CompletionItem) => Promise<embeddedLS.CompletionItem>;
    getSignatureHelp: (uri: string, position: embeddedLS.Position, signatureHelpContext?: embeddedLS.SignatureHelpContext | undefined) => Promise<embeddedLS.SignatureHelp | undefined>;
    doCodeLens: (uri: string) => Promise<embeddedLS.CodeLens[]>;
    doCodeLensResolve: (item: embeddedLS.CodeLens) => Promise<embeddedLS.CodeLens>;
    findDocumentHighlights: (uri: string, position: embeddedLS.Position) => Promise<embeddedLS.DocumentHighlight[] | undefined>;
    findDocumentLinks: (uri: string) => Promise<embeddedLS.DocumentLink[]>;
    findWorkspaceSymbols: (query: string) => Promise<embeddedLS.SymbolInformation[]>;
    doAutoInsert: (uri: string, position: embeddedLS.Position, autoInsertContext: {
        lastChange: {
            range: embeddedLS.Range;
            rangeOffset: number;
            rangeLength: number;
            text: string;
        };
    }) => Promise<NonNullable<string | embeddedLS.TextEdit | null | undefined> | undefined>;
    doExecuteCommand: (command: string, args: embeddedLS.ExecutePluginCommandArgs, executeCommandContext: embeddedLS.ExecuteCommandContext) => Promise<void>;
    getInlayHints: (uri: string, range: embeddedLS.Range) => Promise<embeddedLS.InlayHint[] | undefined>;
    callHierarchy: {
        doPrepare(uri: string, position: embeddedLS.Position): Promise<embeddedLS.CallHierarchyItem[] | undefined>;
        getIncomingCalls(item: embeddedLS.CallHierarchyItem): Promise<embeddedLS.CallHierarchyIncomingCall[]>;
        getOutgoingCalls(item: embeddedLS.CallHierarchyItem): Promise<embeddedLS.CallHierarchyOutgoingCall[]>;
    };
    dispose: () => void;
    context: embeddedLS.LanguageServiceRuntimeContext;
};

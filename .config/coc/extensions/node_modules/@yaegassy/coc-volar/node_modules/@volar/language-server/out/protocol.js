Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportStats = exports.GetVirtualFileRequest = exports.GetVirtualFileNamesRequest = exports.ReloadProjectNotification = exports.WriteVirtualFilesNotification = exports.AutoInsertRequest = exports.GetMatchTsConfigRequest = exports.FindFileReferenceRequest = exports.FsReadDirectoryRequest = exports.FsReadFileRequest = exports.FsStatRequest = exports.ShowReferencesNotification = void 0;
const vscode = require("vscode-languageserver-protocol");
/**
 * Server request client
 */
var ShowReferencesNotification;
(function (ShowReferencesNotification) {
    ShowReferencesNotification.type = new vscode.NotificationType('vue.findReferences');
})(ShowReferencesNotification = exports.ShowReferencesNotification || (exports.ShowReferencesNotification = {}));
var FsStatRequest;
(function (FsStatRequest) {
    FsStatRequest.type = new vscode.RequestType('fs/stat');
})(FsStatRequest = exports.FsStatRequest || (exports.FsStatRequest = {}));
var FsReadFileRequest;
(function (FsReadFileRequest) {
    FsReadFileRequest.type = new vscode.RequestType('fs/readFile');
})(FsReadFileRequest = exports.FsReadFileRequest || (exports.FsReadFileRequest = {}));
var FsReadDirectoryRequest;
(function (FsReadDirectoryRequest) {
    FsReadDirectoryRequest.type = new vscode.RequestType('fs/readDirectory');
})(FsReadDirectoryRequest = exports.FsReadDirectoryRequest || (exports.FsReadDirectoryRequest = {}));
/**
 * Client request server
 */
var FindFileReferenceRequest;
(function (FindFileReferenceRequest) {
    FindFileReferenceRequest.type = new vscode.RequestType('vue/findFileReference');
})(FindFileReferenceRequest = exports.FindFileReferenceRequest || (exports.FindFileReferenceRequest = {}));
var GetMatchTsConfigRequest;
(function (GetMatchTsConfigRequest) {
    GetMatchTsConfigRequest.type = new vscode.RequestType('volar/tsconfig');
})(GetMatchTsConfigRequest = exports.GetMatchTsConfigRequest || (exports.GetMatchTsConfigRequest = {}));
var AutoInsertRequest;
(function (AutoInsertRequest) {
    AutoInsertRequest.type = new vscode.RequestType('vue/autoInsert');
})(AutoInsertRequest = exports.AutoInsertRequest || (exports.AutoInsertRequest = {}));
var WriteVirtualFilesNotification;
(function (WriteVirtualFilesNotification) {
    WriteVirtualFilesNotification.type = new vscode.NotificationType('volar.action.writeVirtualFiles');
})(WriteVirtualFilesNotification = exports.WriteVirtualFilesNotification || (exports.WriteVirtualFilesNotification = {}));
var ReloadProjectNotification;
(function (ReloadProjectNotification) {
    ReloadProjectNotification.type = new vscode.NotificationType('volar.action.reloadProject');
})(ReloadProjectNotification = exports.ReloadProjectNotification || (exports.ReloadProjectNotification = {}));
var GetVirtualFileNamesRequest;
(function (GetVirtualFileNamesRequest) {
    GetVirtualFileNamesRequest.type = new vscode.RequestType('vue/virtualFileNames');
})(GetVirtualFileNamesRequest = exports.GetVirtualFileNamesRequest || (exports.GetVirtualFileNamesRequest = {}));
var GetVirtualFileRequest;
(function (GetVirtualFileRequest) {
    GetVirtualFileRequest.type = new vscode.RequestType('vue/virtualFile');
})(GetVirtualFileRequest = exports.GetVirtualFileRequest || (exports.GetVirtualFileRequest = {}));
var ReportStats;
(function (ReportStats) {
    ReportStats.type = new vscode.NotificationType0('vue/stats');
})(ReportStats = exports.ReportStats || (exports.ReportStats = {}));
//# sourceMappingURL=protocol.js.map
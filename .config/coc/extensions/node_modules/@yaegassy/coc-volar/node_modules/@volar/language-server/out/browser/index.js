var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLanguageServer = void 0;
const request_light_1 = require("request-light");
const ts = require("typescript/lib/tsserverlibrary"); // bundle typescript lib in web
const vscode = require("vscode-languageserver/browser");
const server_1 = require("../common/server");
const http_1 = require("../common/schemaRequestHandlers/http");
const fileSystems_1 = require("./fileSystems");
const shared = require("@volar/shared");
__exportStar(require("../index"), exports);
function createLanguageServer(plugins) {
    const messageReader = new vscode.BrowserMessageReader(self);
    const messageWriter = new vscode.BrowserMessageWriter(self);
    const connection = vscode.createConnection(messageReader, messageWriter);
    (0, server_1.createCommonLanguageServer)({
        plugins,
        connection,
        runtimeEnv: {
            loadTypescript() {
                return ts; // not support load by user config in web
            },
            loadTypescriptLocalized(tsdk, locale) {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        const uri = shared.getUriByPath(`${tsdk}/${locale}/diagnosticMessages.generated.json`);
                        const json = yield (0, http_1.default)(uri);
                        return JSON.parse(json);
                    }
                    catch (_a) { }
                });
            },
            schemaRequestHandlers: {
                http: http_1.default,
                https: http_1.default,
            },
            onDidChangeConfiguration(settings) {
                (0, request_light_1.configure)(settings.http && settings.http.proxy, settings.http && settings.http.proxyStrictSSL);
            },
            fileSystemProvide: undefined,
            createFileSystemHost: fileSystems_1.createWebFileSystemHost,
        },
    });
}
exports.createLanguageServer = createLanguageServer;
//# sourceMappingURL=index.js.map
import { LanguageModule } from '@volar/language-core';
import { TextDocument } from 'vscode-languageserver-textdocument';
import { DocumentServiceRuntimeContext, LanguageServicePlugin, LanguageServicePluginContext } from './types';
import type * as _ from 'vscode-languageserver-protocol';
export type DocumentService = ReturnType<typeof createDocumentService>;
export declare function createDocumentServiceContext(options: {
    ts: typeof import('typescript/lib/tsserverlibrary');
    getLanguageModules(): LanguageModule[];
    getPlugins(): LanguageServicePlugin[];
    env: LanguageServicePluginContext['env'];
}): DocumentServiceRuntimeContext;
export declare function isTsDocument(document: TextDocument): boolean;
export declare function createDocumentService(context: DocumentServiceRuntimeContext): {
    format: (document: TextDocument, options: _.FormattingOptions, range?: _.Range | undefined, onTypeParams?: {
        ch: string;
        position: _.Position;
    } | undefined) => Promise<_.TextEdit[] | undefined>;
    getFoldingRanges: (document: TextDocument) => Promise<_.FoldingRange[] | undefined>;
    getSelectionRanges: (document: TextDocument, positions: _.Position[]) => Promise<_.SelectionRange[] | undefined>;
    findLinkedEditingRanges: (document: TextDocument, position: _.Position) => Promise<_.LinkedEditingRanges | undefined>;
    findDocumentSymbols: (document: TextDocument) => Promise<_.SymbolInformation[] | undefined>;
    findDocumentColors: (document: TextDocument) => Promise<_.ColorInformation[] | undefined>;
    getColorPresentations: (document: TextDocument, color: _.Color, range: _.Range) => Promise<_.ColorPresentation[] | undefined>;
    doAutoInsert: (document: TextDocument, position: _.Position, options: {
        lastChange: {
            range: _.Range;
            rangeOffset: number;
            rangeLength: number;
            text: string;
        };
    }) => Promise<NonNullable<string | _.TextEdit | null | undefined> | undefined>;
    context: DocumentServiceRuntimeContext;
};

Object.defineProperty(exports, "__esModule", { value: true });
const language_service_1 = require("@volar/language-service");
const vue = require("@volar/vue-language-core");
function default_1(options) {
    let context;
    return {
        setup(_context) {
            context = _context;
        },
        inlayHints: {
            on(document, range) {
                return worker(document.uri, (vueFile) => {
                    const ts = context.typescript.module;
                    const hoverOffsets = [];
                    const inlayHints = [];
                    for (const pointer of document.getText(range).matchAll(/<!--\s*\^\?\s*-->/g)) {
                        const offset = pointer.index + pointer[0].indexOf('^?') + document.offsetAt(range.start);
                        const position = document.positionAt(offset);
                        hoverOffsets.push([position, document.offsetAt({
                                line: position.line - 1,
                                character: position.character,
                            })]);
                    }
                    (0, language_service_1.forEachEmbeddedFile)(vueFile, (embedded) => {
                        if (embedded.kind === language_service_1.FileKind.TypeScriptHostFile) {
                            for (const [_, map] of options.documents.getMapsByVirtualFileUri(document.uri)) {
                                for (const [pointerPosition, hoverOffset] of hoverOffsets) {
                                    for (const [tsOffset, mapping] of map.map.toGeneratedOffsets(hoverOffset)) {
                                        if (mapping.data.hover) {
                                            const quickInfo = context.typescript.languageService.getQuickInfoAtPosition(embedded.fileName, tsOffset);
                                            if (quickInfo) {
                                                inlayHints.push({
                                                    position: { line: pointerPosition.line, character: pointerPosition.character + 2 },
                                                    label: ts.displayPartsToString(quickInfo.displayParts),
                                                    paddingLeft: true,
                                                    paddingRight: false,
                                                });
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    });
                    return inlayHints;
                });
            },
        },
    };
    function worker(uri, callback) {
        const virtualFile = options.documents.getVirtualFileByUri(uri);
        if (!(virtualFile instanceof vue.VueFile))
            return;
        return callback(virtualFile);
    }
}
exports.default = default_1;
//# sourceMappingURL=vue-twoslash-queries.js.map
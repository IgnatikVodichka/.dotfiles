var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCommonLanguageServer = void 0;
const vscode = require("vscode-languageserver");
const vscode_uri_1 = require("vscode-uri");
const types_1 = require("../types");
const cancellationPipe_1 = require("./cancellationPipe");
const configurationHost_1 = require("./configurationHost");
const documents_1 = require("./documents");
const syntaxServicesHost_1 = require("./syntaxServicesHost");
const registerFeatures_1 = require("./utils/registerFeatures");
const workspaces_1 = require("./workspaces");
function createCommonLanguageServer(context) {
    let initParams;
    let options;
    let roots = [];
    let fsHost;
    let projects;
    let documentServiceHost;
    let configurationHost;
    let plugins;
    const documents = (0, documents_1.createDocuments)(context.connection);
    context.connection.onInitialize((_params) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        initParams = _params;
        options = initParams.initializationOptions;
        plugins = context.plugins.map(plugin => plugin(options));
        if (((_a = initParams.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.workspaceFolders) && initParams.workspaceFolders) {
            roots = initParams.workspaceFolders.map(folder => vscode_uri_1.URI.parse(folder.uri));
        }
        else if (initParams.rootUri) {
            roots = [vscode_uri_1.URI.parse(initParams.rootUri)];
        }
        else if (initParams.rootPath) {
            roots = [vscode_uri_1.URI.file(initParams.rootPath)];
        }
        const result = {
            capabilities: {
                textDocumentSync: (_b = options.textDocumentSync) !== null && _b !== void 0 ? _b : vscode.TextDocumentSyncKind.Incremental,
            },
        };
        configurationHost = ((_c = initParams.capabilities.workspace) === null || _c === void 0 ? void 0 : _c.configuration) ? (0, configurationHost_1.createConfigurationHost)(initParams, context.connection) : undefined;
        const serverMode = (_d = options.serverMode) !== null && _d !== void 0 ? _d : types_1.ServerMode.Semantic;
        (0, registerFeatures_1.setupSyntacticCapabilities)(initParams.capabilities, result.capabilities, options);
        yield _createDocumentServiceHost();
        if (serverMode === types_1.ServerMode.Semantic) {
            (0, registerFeatures_1.setupSemanticCapabilities)(initParams.capabilities, result.capabilities, options, plugins, getSemanticTokensLegend());
            yield createLanguageServiceHost();
        }
        try {
            // show version on LSP logs
            const packageJson = require('../package.json');
            result.serverInfo = {
                name: packageJson.name,
                version: packageJson.version,
            };
        }
        catch (_e) { }
        return result;
    }));
    context.connection.onInitialized(() => {
        var _a, _b, _c;
        fsHost === null || fsHost === void 0 ? void 0 : fsHost.ready(context.connection);
        configurationHost === null || configurationHost === void 0 ? void 0 : configurationHost.ready();
        if ((_a = initParams.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.workspaceFolders) {
            context.connection.workspace.onDidChangeWorkspaceFolders(e => {
                for (const folder of e.added) {
                    documentServiceHost === null || documentServiceHost === void 0 ? void 0 : documentServiceHost.add(vscode_uri_1.URI.parse(folder.uri));
                    projects === null || projects === void 0 ? void 0 : projects.add(vscode_uri_1.URI.parse(folder.uri));
                }
                for (const folder of e.removed) {
                    documentServiceHost === null || documentServiceHost === void 0 ? void 0 : documentServiceHost.remove(vscode_uri_1.URI.parse(folder.uri));
                    projects === null || projects === void 0 ? void 0 : projects.remove(vscode_uri_1.URI.parse(folder.uri));
                }
            });
        }
        if (options.serverMode !== types_1.ServerMode.Syntactic
            && !options.disableFileWatcher
            && ((_c = (_b = initParams.capabilities.workspace) === null || _b === void 0 ? void 0 : _b.didChangeWatchedFiles) === null || _c === void 0 ? void 0 : _c.dynamicRegistration)) {
            context.connection.client.register(vscode.DidChangeWatchedFilesNotification.type, {
                watchers: [
                    {
                        globPattern: `**/*.{${[
                            'js',
                            'cjs',
                            'mjs',
                            'ts',
                            'cts',
                            'mts',
                            'jsx',
                            'tsx',
                            'json',
                            ...plugins.map(plugin => plugin.extraFileExtensions.map(ext => ext.extension)).flat(),
                        ].join(',')}}`
                    },
                ]
            });
        }
    });
    context.connection.listen();
    function _createDocumentServiceHost() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const ts = context.runtimeEnv.loadTypescript(options.typescript.tsdk);
            documentServiceHost = (0, syntaxServicesHost_1.createSyntaxServicesHost)(context.runtimeEnv, plugins, ts, configurationHost, options);
            for (const root of roots) {
                documentServiceHost.add(root);
            }
            (yield Promise.resolve().then(() => require('./features/documentFeatures'))).register(context.connection, documents, documentServiceHost);
            for (const plugin of plugins) {
                (_b = (_a = plugin.syntacticService) === null || _a === void 0 ? void 0 : _a.onInitialize) === null || _b === void 0 ? void 0 : _b.call(_a, context.connection);
            }
        });
    }
    function createLanguageServiceHost() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const ts = context.runtimeEnv.loadTypescript(options.typescript.tsdk);
            fsHost = context.runtimeEnv.createFileSystemHost(ts, initParams.capabilities);
            const tsLocalized = initParams.locale ? yield context.runtimeEnv.loadTypescriptLocalized(options.typescript.tsdk, initParams.locale) : undefined;
            const cancelTokenHost = (0, cancellationPipe_1.createCancellationTokenHost)(options.cancellationPipeName);
            const _projects = (0, workspaces_1.createWorkspaces)({
                server: context,
                fileSystemHost: fsHost,
                configurationHost,
                ts,
                tsLocalized,
                initParams: initParams,
                initOptions: options,
                documents,
                cancelTokenHost,
                plugins,
            });
            projects = _projects;
            for (const root of roots) {
                projects.add(root);
            }
            (yield Promise.resolve().then(() => require('./features/customFeatures'))).register(context.connection, projects);
            (yield Promise.resolve().then(() => require('./features/languageFeatures'))).register(context.connection, projects, initParams, cancelTokenHost, getSemanticTokensLegend());
            for (const plugin of plugins) {
                (_b = (_a = plugin.semanticService) === null || _a === void 0 ? void 0 : _a.onInitialize) === null || _b === void 0 ? void 0 : _b.call(_a, context.connection, getLanguageService);
            }
            function getLanguageService(uri) {
                var _a;
                return __awaiter(this, void 0, void 0, function* () {
                    const project = (_a = (yield projects.getProject(uri))) === null || _a === void 0 ? void 0 : _a.project;
                    return project === null || project === void 0 ? void 0 : project.getLanguageService();
                });
            }
        });
    }
    function getSemanticTokensLegend() {
        if (!options.semanticTokensLegend) {
            return standardSemanticTokensLegend;
        }
        return {
            tokenTypes: [...standardSemanticTokensLegend.tokenTypes, ...options.semanticTokensLegend.tokenTypes],
            tokenModifiers: [...standardSemanticTokensLegend.tokenModifiers, ...options.semanticTokensLegend.tokenModifiers],
        };
    }
}
exports.createCommonLanguageServer = createCommonLanguageServer;
// https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide#standard-token-types-and-modifiers
const standardSemanticTokensLegend = {
    tokenTypes: [
        'namespace',
        'class',
        'enum',
        'interface',
        'struct',
        'typeParameter',
        'type',
        'parameter',
        'variable',
        'property',
        'enumMember',
        'decorator',
        'event',
        'function',
        'method',
        'macro',
        'label',
        'comment',
        'string',
        'keyword',
        'number',
        'regexp',
        'operator',
    ],
    tokenModifiers: [
        'declaration',
        'definition',
        'readonly',
        'static',
        'deprecated',
        'abstract',
        'async',
        'modification',
        'documentation',
        'defaultLibrary',
    ],
};
//# sourceMappingURL=server.js.map
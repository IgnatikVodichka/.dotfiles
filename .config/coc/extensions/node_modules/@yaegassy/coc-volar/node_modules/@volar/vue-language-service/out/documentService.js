Object.defineProperty(exports, "__esModule", { value: true });
exports.createDocumentService = exports.getDocumentServicePlugins = void 0;
const css_1 = require("@volar-plugins/css");
const html_1 = require("@volar-plugins/html");
const json_1 = require("@volar-plugins/json");
const pug_1 = require("@volar-plugins/pug");
const pug_beautify_1 = require("@volar-plugins/pug-beautify");
const typescript_1 = require("@volar-plugins/typescript");
const vue_1 = require("./plugins/vue");
const vue_autoinsert_parentheses_1 = require("./plugins/vue-autoinsert-parentheses");
const vue_autoinsert_space_1 = require("./plugins/vue-autoinsert-space");
const embeddedLS = require("@volar/language-service");
const vue = require("@volar/vue-language-core");
const shared = require("@volar/shared");
const vue_language_core_1 = require("@volar/vue-language-core");
function getDocumentServicePlugins(context) {
    const getVueFile = (document) => {
        context.update(document);
        const virtualFile = context.documents.getVirtualFileByUri(document.uri);
        if (virtualFile instanceof vue_language_core_1.VueFile) {
            return virtualFile;
        }
    };
    const vuePlugin = (0, vue_1.default)({ getVueFile });
    const htmlPlugin = (0, html_1.default)();
    const pugPlugin = (0, pug_1.default)();
    const cssPlugin = (0, css_1.default)();
    const jsonPlugin = (0, json_1.default)();
    const tsPlugin = (0, typescript_1.default)();
    const autoWrapParenthesesPlugin = (0, vue_autoinsert_parentheses_1.default)({ getVueFile });
    const autoAddSpacePlugin = (0, vue_autoinsert_space_1.default)();
    const pugFormatPlugin = (0, pug_beautify_1.default)();
    return [
        vuePlugin,
        htmlPlugin,
        pugPlugin,
        pugFormatPlugin,
        cssPlugin,
        jsonPlugin,
        tsPlugin,
        autoWrapParenthesesPlugin,
        autoAddSpacePlugin,
    ];
}
exports.getDocumentServicePlugins = getDocumentServicePlugins;
function createDocumentService(ts, env) {
    const vueLanguageModules = vue.createLanguageModules(ts, shared.getPathOfUri(env.rootUri.toString()), {}, {});
    const languageServiceContext = embeddedLS.createDocumentServiceContext({
        ts,
        env,
        getLanguageModules() {
            return vueLanguageModules;
        },
        getPlugins() {
            return plugins;
        },
    });
    const plugins = getDocumentServicePlugins(languageServiceContext);
    const languageService = embeddedLS.createDocumentService(languageServiceContext);
    return languageService;
}
exports.createDocumentService = createDocumentService;
//# sourceMappingURL=documentService.js.map
import { DocumentServiceRuntimeContext } from '@volar/language-service';
import * as embeddedLS from '@volar/language-service';
import type * as _2 from 'vscode-languageserver-textdocument';
export declare function getDocumentServicePlugins(context: DocumentServiceRuntimeContext): embeddedLS.LanguageServicePlugin[];
export declare function createDocumentService(ts: typeof import('typescript/lib/tsserverlibrary'), env: embeddedLS.LanguageServicePluginContext['env']): {
    format: (document: _2.TextDocument, options: embeddedLS.FormattingOptions, range?: embeddedLS.Range | undefined, onTypeParams?: {
        ch: string;
        position: embeddedLS.Position;
    } | undefined) => Promise<embeddedLS.TextEdit[] | undefined>;
    getFoldingRanges: (document: _2.TextDocument) => Promise<embeddedLS.FoldingRange[] | undefined>;
    getSelectionRanges: (document: _2.TextDocument, positions: embeddedLS.Position[]) => Promise<embeddedLS.SelectionRange[] | undefined>;
    findLinkedEditingRanges: (document: _2.TextDocument, position: embeddedLS.Position) => Promise<embeddedLS.LinkedEditingRanges | undefined>;
    findDocumentSymbols: (document: _2.TextDocument) => Promise<embeddedLS.SymbolInformation[] | undefined>;
    findDocumentColors: (document: _2.TextDocument) => Promise<embeddedLS.ColorInformation[] | undefined>;
    getColorPresentations: (document: _2.TextDocument, color: embeddedLS.Color, range: embeddedLS.Range) => Promise<embeddedLS.ColorPresentation[] | undefined>;
    doAutoInsert: (document: _2.TextDocument, position: embeddedLS.Position, options: {
        lastChange: {
            range: embeddedLS.Range;
            rangeOffset: number;
            rangeLength: number;
            text: string;
        };
    }) => Promise<NonNullable<string | embeddedLS.TextEdit | null | undefined> | undefined>;
    context: DocumentServiceRuntimeContext;
};

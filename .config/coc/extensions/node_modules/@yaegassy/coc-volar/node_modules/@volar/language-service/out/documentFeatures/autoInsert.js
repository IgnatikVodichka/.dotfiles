Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
function register(context) {
    return (document, position, options) => {
        return (0, featureWorkers_1.documentArgFeatureWorker)(context, document, { position, options }, () => true, function* ({ position, options }, map) {
            for (const mappedPos of map.toGeneratedPositions(position, data => !!data.completion)) {
                for (const [mappedChangeOffset] of map.map.toGeneratedOffsets(options.lastChange.rangeOffset)) {
                    yield {
                        position: mappedPos,
                        options: {
                            lastChange: Object.assign(Object.assign({}, options.lastChange), { rangeOffset: mappedChangeOffset, range: {
                                    start: map.virtualFileDocument.positionAt(mappedChangeOffset),
                                    end: map.virtualFileDocument.positionAt(mappedChangeOffset + options.lastChange.rangeLength),
                                } })
                        }
                    };
                }
            }
        }, (plugin, document, { position, options }) => { var _a; return (_a = plugin.doAutoInsert) === null || _a === void 0 ? void 0 : _a.call(plugin, document, position, options); }, (data, map) => {
            if (typeof data === 'string')
                return data;
            const range = map.toSourceRange(data.range);
            if (range) {
                data.range = range;
                return data;
            }
        });
    };
}
exports.register = register;
//# sourceMappingURL=autoInsert.js.map
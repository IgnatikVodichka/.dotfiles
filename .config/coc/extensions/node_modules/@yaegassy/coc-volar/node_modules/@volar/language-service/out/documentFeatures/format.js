var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const vscode = require("vscode-languageserver-protocol");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
function register(context) {
    const ts = context.typescript;
    return (document, options, range, onTypeParams) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        if (!range) {
            range = vscode.Range.create(document.positionAt(0), document.positionAt(document.getText().length));
        }
        const virtualFile = context.documents.getRootFileBySourceFileUri(document.uri);
        const originalDocument = document;
        const rootEdits = onTypeParams
            ? yield tryFormat(document, onTypeParams.position, undefined, onTypeParams.ch)
            : yield tryFormat(document, range, undefined);
        if (!virtualFile)
            return rootEdits;
        if (rootEdits === null || rootEdits === void 0 ? void 0 : rootEdits.length) {
            applyEdits(rootEdits);
        }
        let level = 0;
        const initialIndentLanguageId = (_b = yield ((_a = context.pluginContext.env.configurationHost) === null || _a === void 0 ? void 0 : _a.getConfiguration('volar.format.initialIndent'))) !== null && _b !== void 0 ? _b : { html: true };
        while (true) {
            tryUpdateVueDocument();
            const embeddedFiles = getEmbeddedFilesByLevel(virtualFile, level++);
            if (embeddedFiles.length === 0)
                break;
            let edits = [];
            let toPatchIndent;
            for (const embedded of embeddedFiles) {
                if (!embedded.capabilities.documentFormatting)
                    continue;
                const maps = [...context.documents.getMapsByVirtualFileName(embedded.fileName)];
                const map = (_c = maps.find(map => map[1].sourceFileDocument.uri === document.uri)) === null || _c === void 0 ? void 0 : _c[1];
                if (!map)
                    continue;
                const initialIndentBracket = typeof embedded.capabilities.documentFormatting === 'object' && initialIndentLanguageId[map.virtualFileDocument.languageId]
                    ? embedded.capabilities.documentFormatting.initialIndentBracket
                    : undefined;
                let _edits;
                if (onTypeParams) {
                    const embeddedPosition = map.toGeneratedPosition(onTypeParams.position);
                    if (embeddedPosition) {
                        _edits = yield tryFormat(map.virtualFileDocument, embeddedPosition, initialIndentBracket, onTypeParams.ch);
                    }
                }
                else {
                    let genRange = map.toGeneratedRange(range);
                    if (!genRange) {
                        const firstMapping = map.map.mappings.sort((a, b) => a.sourceRange[0] - b.sourceRange[0])[0];
                        const lastMapping = map.map.mappings.sort((a, b) => b.sourceRange[0] - a.sourceRange[0])[0];
                        if (firstMapping && document.offsetAt(range.start) < firstMapping.sourceRange[0]
                            && lastMapping && document.offsetAt(range.end) > lastMapping.sourceRange[1]) {
                            genRange = {
                                start: map.virtualFileDocument.positionAt(firstMapping.generatedRange[0]),
                                end: map.virtualFileDocument.positionAt(lastMapping.generatedRange[1]),
                            };
                        }
                    }
                    if (genRange) {
                        toPatchIndent = {
                            sourceMapEmbeddedDocumentUri: map.virtualFileDocument.uri,
                        };
                        _edits = yield tryFormat(map.virtualFileDocument, genRange, initialIndentBracket);
                    }
                }
                if (!_edits)
                    continue;
                for (const textEdit of _edits) {
                    const range = map.toSourceRange(textEdit.range);
                    if (range) {
                        edits.push({
                            newText: textEdit.newText,
                            range,
                        });
                    }
                }
            }
            if (edits.length > 0) {
                applyEdits(edits);
            }
            if (toPatchIndent) {
                tryUpdateVueDocument();
                const maps = [...context.documents.getMapsByVirtualFileName(virtualFile.fileName)];
                const map = (_d = maps.find(map => map[1].sourceFileDocument.uri === (toPatchIndent === null || toPatchIndent === void 0 ? void 0 : toPatchIndent.sourceMapEmbeddedDocumentUri))) === null || _d === void 0 ? void 0 : _d[1];
                if (map) {
                    const indentEdits = patchInterpolationIndent(context.documents.getDocumentByFileName(virtualFile.snapshot, virtualFile.fileName), map);
                    if (indentEdits.length > 0) {
                        applyEdits(indentEdits);
                    }
                }
            }
        }
        if (document.getText() === originalDocument.getText())
            return;
        const editRange = vscode.Range.create(originalDocument.positionAt(0), originalDocument.positionAt(originalDocument.getText().length));
        const textEdit = vscode.TextEdit.replace(editRange, document.getText());
        return [textEdit];
        function tryUpdateVueDocument() {
            if (virtualFile && virtualFile.snapshot.getText(0, virtualFile.snapshot.getLength()) !== document.getText()) {
                context.updateVirtualFile(virtualFile.fileName, ts.ScriptSnapshot.fromString(document.getText()));
            }
        }
        function getEmbeddedFilesByLevel(rootFile, level) {
            const embeddedFilesByLevel = [rootFile.embeddedFiles];
            while (true) {
                if (embeddedFilesByLevel.length > level)
                    return embeddedFilesByLevel[level];
                let nextLevel = [];
                for (const file of embeddedFilesByLevel[embeddedFilesByLevel.length - 1]) {
                    nextLevel = nextLevel.concat(file.embeddedFiles);
                }
                embeddedFilesByLevel.push(nextLevel);
            }
        }
        function tryFormat(document, range, initialIndentBracket, ch) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                let formatDocument = document;
                let formatRange = range;
                if (initialIndentBracket) {
                    formatDocument = vscode_languageserver_textdocument_1.TextDocument.create(document.uri, document.languageId, document.version, initialIndentBracket[0] + document.getText() + initialIndentBracket[1]);
                    if (vscode.Position.is(range)) {
                        formatRange = formatDocument.positionAt(document.offsetAt(range) + initialIndentBracket[0].length);
                    }
                    else {
                        const startOffset = document.offsetAt(range.start);
                        const endOffset = document.offsetAt(range.end);
                        if (startOffset === 0 && endOffset === document.getText().length) {
                            // full format
                            formatRange = {
                                start: formatDocument.positionAt(0),
                                end: formatDocument.positionAt(formatDocument.getText().length),
                            };
                        }
                        else {
                            // range format
                            formatRange = {
                                start: formatDocument.positionAt(startOffset + initialIndentBracket[0].length),
                                end: formatDocument.positionAt(endOffset + initialIndentBracket[0].length),
                            };
                        }
                    }
                }
                context.prepareLanguageServices(formatDocument);
                for (const plugin of context.plugins) {
                    let edits;
                    try {
                        if (ch !== undefined && vscode.Position.is(formatRange)) {
                            edits = yield ((_a = plugin.formatOnType) === null || _a === void 0 ? void 0 : _a.call(plugin, formatDocument, formatRange, ch, options));
                        }
                        else if (ch === undefined && vscode.Range.is(formatRange)) {
                            edits = yield ((_b = plugin.format) === null || _b === void 0 ? void 0 : _b.call(plugin, formatDocument, formatRange, options));
                        }
                    }
                    catch (err) {
                        console.error(err);
                    }
                    if (!edits)
                        continue;
                    if (!edits.length)
                        return edits;
                    if (initialIndentBracket) {
                        let newText = vscode_languageserver_textdocument_1.TextDocument.applyEdits(formatDocument, edits);
                        newText = newText.substring(newText.indexOf(initialIndentBracket[0]) + initialIndentBracket[0].length, newText.lastIndexOf(initialIndentBracket[1]));
                        if (newText === document.getText()) {
                            edits = [];
                        }
                        else {
                            edits = [{
                                    newText,
                                    range: {
                                        start: document.positionAt(0),
                                        end: document.positionAt(document.getText().length),
                                    },
                                }];
                        }
                    }
                    return edits;
                }
            });
        }
        function applyEdits(textEdits) {
            const newText = vscode_languageserver_textdocument_1.TextDocument.applyEdits(document, textEdits);
            if (newText !== document.getText()) {
                document = vscode_languageserver_textdocument_1.TextDocument.create(document.uri, document.languageId, document.version + 1, newText);
            }
        }
    });
}
exports.register = register;
function patchInterpolationIndent(document, map) {
    const indentTextEdits = [];
    for (const mapped of map.map.mappings) {
        const textRange = {
            start: document.positionAt(mapped.sourceRange[0]),
            end: document.positionAt(mapped.sourceRange[1]),
        };
        const text = document.getText(textRange);
        if (text.indexOf('\n') === -1)
            continue;
        const lines = text.split('\n');
        const removeIndent = getRemoveIndent(lines);
        const baseIndent = getBaseIndent(mapped.sourceRange[0]);
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i];
            if (line.startsWith(removeIndent)) {
                lines[i] = line.replace(removeIndent, baseIndent);
            }
            else {
                lines[i] = baseIndent.replace(removeIndent, '') + line;
            }
        }
        indentTextEdits.push({
            newText: lines.join('\n'),
            range: textRange,
        });
    }
    return indentTextEdits;
    function getRemoveIndent(lines) {
        const lastLine = lines[lines.length - 1];
        return lastLine.substring(0, lastLine.length - lastLine.trimStart().length);
    }
    function getBaseIndent(pos) {
        const startPos = document.positionAt(pos);
        const startLineText = document.getText({ start: startPos, end: { line: startPos.line, character: 0 } });
        return startLineText.substring(0, startLineText.length - startLineText.trimStart().length);
    }
}
//# sourceMappingURL=format.js.map
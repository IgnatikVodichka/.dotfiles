import * as embedded from '@volar/language-service';
import { URI } from 'vscode-uri';
import { LanguageServerInitializationOptions, LanguageServerPlugin, RuntimeEnvironment } from '../types';
import type * as _ from 'vscode-languageserver-textdocument';
export declare function createSyntaxServicesHost(runtimeEnv: RuntimeEnvironment, plugins: ReturnType<LanguageServerPlugin>[], ts: typeof import('typescript/lib/tsserverlibrary'), configHost: embedded.ConfigurationHost | undefined, initOptions: LanguageServerInitializationOptions): {
    add: (rootUri: URI) => void;
    remove: (rootUri: URI) => void;
    get: (documentUri: string) => {
        format: (document: _.TextDocument, options: embedded.FormattingOptions, range?: embedded.Range | undefined, onTypeParams?: {
            ch: string;
            position: embedded.Position;
        } | undefined) => Promise<embedded.TextEdit[] | undefined>;
        getFoldingRanges: (document: _.TextDocument) => Promise<embedded.FoldingRange[] | undefined>;
        getSelectionRanges: (document: _.TextDocument, positions: embedded.Position[]) => Promise<embedded.SelectionRange[] | undefined>;
        findLinkedEditingRanges: (document: _.TextDocument, position: embedded.Position) => Promise<embedded.LinkedEditingRanges | undefined>;
        findDocumentSymbols: (document: _.TextDocument) => Promise<embedded.SymbolInformation[] | undefined>;
        findDocumentColors: (document: _.TextDocument) => Promise<embedded.ColorInformation[] | undefined>;
        getColorPresentations: (document: _.TextDocument, color: embedded.Color, range: embedded.Range) => Promise<embedded.ColorPresentation[] | undefined>;
        doAutoInsert: (document: _.TextDocument, position: embedded.Position, options: {
            lastChange: {
                range: embedded.Range;
                rangeOffset: number;
                rangeLength: number;
                text: string;
            };
        }) => Promise<NonNullable<string | embedded.TextEdit | null | undefined> | undefined>;
        context: embedded.DocumentServiceRuntimeContext;
    };
};

Object.defineProperty(exports, "__esModule", { value: true });
exports.getWordRange = exports.isInsideRange = exports.getOverlapRange = void 0;
function getOverlapRange(range1Start, range1End, range2Start, range2End) {
    const start = Math.max(range1Start, range2Start);
    const end = Math.min(range1End, range2End);
    if (start > end)
        return undefined;
    return {
        start,
        end,
    };
}
exports.getOverlapRange = getOverlapRange;
function isInsideRange(parent, child) {
    if (child.start.line < parent.start.line)
        return false;
    if (child.end.line > parent.end.line)
        return false;
    if (child.start.line === parent.start.line && child.start.character < parent.start.character)
        return false;
    if (child.end.line === parent.end.line && child.end.character > parent.end.character)
        return false;
    return true;
}
exports.isInsideRange = isInsideRange;
function getWordRange(wordPattern, position, document) {
    const lineStart = {
        line: position.line,
        character: 0,
    };
    const lineEnd = {
        line: position.line + 1,
        character: 0,
    };
    const offset = document.offsetAt(position);
    const lineStartOffset = document.offsetAt(lineStart);
    const lineText = document.getText({ start: lineStart, end: lineEnd });
    for (const match of lineText.matchAll(wordPattern)) {
        if (match.index === undefined)
            continue;
        const matchStart = match.index + lineStartOffset;
        const matchEnd = matchStart + match[0].length;
        if (offset >= matchStart && offset <= matchEnd) {
            return {
                start: document.positionAt(matchStart),
                end: document.positionAt(matchEnd),
            };
        }
    }
    return undefined;
}
exports.getWordRange = getWordRange;
//# sourceMappingURL=common.js.map
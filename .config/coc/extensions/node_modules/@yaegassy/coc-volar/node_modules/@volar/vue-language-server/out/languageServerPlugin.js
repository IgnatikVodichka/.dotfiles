var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const shared = require("@volar/shared");
const vue = require("@volar/vue-language-service");
const vue2 = require("@volar/vue-language-core");
const nameCasing = require("@volar/vue-language-service");
const protocol_1 = require("./protocol");
const meta = require("vue-component-meta");
const plugin = (initOptions) => {
    var _a, _b;
    const extraFileExtensions = [{ extension: 'vue', isMixedContent: true, scriptKind: 7 }];
    if ((_a = initOptions.petiteVue) === null || _a === void 0 ? void 0 : _a.processHtmlFile) {
        extraFileExtensions.push({ extension: 'html', isMixedContent: true, scriptKind: 7 });
    }
    if ((_b = initOptions.vitePress) === null || _b === void 0 ? void 0 : _b.processMdFile) {
        extraFileExtensions.push({ extension: 'md', isMixedContent: true, scriptKind: 7 });
    }
    if (initOptions.additionalExtensions) {
        for (const additionalExtension of initOptions.additionalExtensions) {
            extraFileExtensions.push({ extension: additionalExtension, isMixedContent: true, scriptKind: 7 });
        }
    }
    return {
        extraFileExtensions,
        semanticService: {
            resolveLanguageServiceHost(ts, sys, tsConfig, host) {
                var _a;
                let vueOptions = {};
                if (typeof tsConfig === 'string') {
                    vueOptions = vue2.createParsedCommandLine(ts, sys, tsConfig, []).vueOptions;
                }
                vueOptions.extensions = getVueExts((_a = vueOptions.extensions) !== null && _a !== void 0 ? _a : ['.vue']);
                return Object.assign(Object.assign({}, host), { getVueCompilationSettings: () => vueOptions });
            },
            getLanguageModules(host) {
                const vueLanguageModules = vue2.createLanguageModules(host.getTypeScriptModule(), host.getCurrentDirectory(), host.getCompilationSettings(), host.getVueCompilationSettings());
                return vueLanguageModules;
            },
            getServicePlugins(host, service) {
                var _a;
                const settings = {};
                if (initOptions.json) {
                    settings.json = { schemas: [] };
                    for (const blockType in initOptions.json.customBlockSchemaUrls) {
                        const url = initOptions.json.customBlockSchemaUrls[blockType];
                        (_a = settings.json.schemas) === null || _a === void 0 ? void 0 : _a.push({
                            fileMatch: [`*.customBlock_${blockType}_*.json*`],
                            uri: new URL(url, service.context.pluginContext.env.rootUri.toString() + '/').toString(),
                        });
                    }
                }
                return vue.getLanguageServicePlugins(host, service, settings);
            },
            onInitialize(connection, getService) {
                connection.onRequest(protocol_1.GetVueCompilerOptionsRequest.type, (params) => __awaiter(this, void 0, void 0, function* () {
                    var _a;
                    const languageService = yield getService(params.uri);
                    const host = languageService.context.host;
                    return (_a = host.getVueCompilationSettings) === null || _a === void 0 ? void 0 : _a.call(host);
                }));
                connection.onRequest(protocol_1.DetectNameCasingRequest.type, (params) => __awaiter(this, void 0, void 0, function* () {
                    const languageService = yield getService(params.textDocument.uri);
                    return nameCasing.detect(languageService.context, params.textDocument.uri);
                }));
                connection.onRequest(protocol_1.GetConvertTagCasingEditsRequest.type, (params) => __awaiter(this, void 0, void 0, function* () {
                    const languageService = yield getService(params.textDocument.uri);
                    return nameCasing.convertTagName(languageService.context, params.textDocument.uri, params.casing);
                }));
                connection.onRequest(protocol_1.GetConvertAttrCasingEditsRequest.type, (params) => __awaiter(this, void 0, void 0, function* () {
                    const languageService = yield getService(params.textDocument.uri);
                    return nameCasing.convertAttrName(languageService.context, params.textDocument.uri, params.casing);
                }));
                const checkers = new WeakMap();
                connection.onRequest(protocol_1.GetComponentMeta.type, (params) => __awaiter(this, void 0, void 0, function* () {
                    const languageService = yield getService(params.uri);
                    let checker = checkers.get(languageService.context.host);
                    if (!checker) {
                        checker = meta.baseCreate(languageService.context.host, {}, languageService.context.host.getCurrentDirectory() + '/tsconfig.json.global.vue', languageService.context.pluginContext.typescript.module);
                        checkers.set(languageService.context.host, checker);
                    }
                    return checker.getComponentMeta(shared.getPathOfUri(params.uri));
                }));
            },
        },
        syntacticService: {
            getLanguageModules(ts, env) {
                const vueOptions = { extensions: getVueExts(['.vue']) };
                const vueLanguagePlugins = vue2.getDefaultVueLanguagePlugins(ts, shared.getPathOfUri(env.rootUri.toString()), {}, vueOptions, []);
                const vueLanguageModule = {
                    createFile(fileName, snapshot) {
                        var _a;
                        if ((_a = vueOptions.extensions) === null || _a === void 0 ? void 0 : _a.some(ext => fileName.endsWith(ext))) {
                            return new vue2.VueFile(fileName, snapshot, ts, vueLanguagePlugins);
                        }
                    },
                    updateFile(sourceFile, snapshot) {
                        sourceFile.update(snapshot);
                    },
                };
                return [vueLanguageModule];
            },
            getServicePlugins(context) {
                return vue.getDocumentServicePlugins(context);
            },
            onInitialize(connection) {
                connection.onRequest(protocol_1.ParseSFCRequest.type, params => {
                    return vue2.parse(params);
                });
            },
        },
    };
    function getVueExts(baseExts) {
        const set = new Set([
            ...baseExts,
            ...extraFileExtensions.map(ext => '.' + ext.extension),
        ]);
        return [...set];
    }
};
module.exports = plugin;
//# sourceMappingURL=languageServerPlugin.js.map
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLanguageServer = void 0;
const shared = require("@volar/shared");
const fs = require("fs");
const request_light_1 = require("request-light");
const html = require("vscode-html-languageservice");
const vscode = require("vscode-languageserver/node");
const server_1 = require("../common/server");
const file_1 = require("../common/schemaRequestHandlers/file");
const http_1 = require("../common/schemaRequestHandlers/http");
const fileSystem_1 = require("./fileSystem");
__exportStar(require("../index"), exports);
function createLanguageServer(plugins) {
    const connection = vscode.createConnection(vscode.ProposedFeatures.all);
    (0, server_1.createCommonLanguageServer)({
        plugins,
        connection,
        runtimeEnv: {
            loadTypescript(tsdk) {
                for (const name of ['./typescript.js', './tsserverlibrary.js', './tsserver.js']) {
                    try {
                        const path = require.resolve(name, { paths: [tsdk] });
                        return require(path);
                    }
                    catch (_a) { }
                }
            },
            loadTypescriptLocalized(tsdk, locale) {
                return __awaiter(this, void 0, void 0, function* () {
                    try {
                        const path = require.resolve(`./${locale}/diagnosticMessages.generated.json`, { paths: [tsdk] });
                        return require(path);
                    }
                    catch (_a) { }
                });
            },
            schemaRequestHandlers: {
                file: file_1.default,
                http: http_1.default,
                https: http_1.default,
            },
            onDidChangeConfiguration(settings) {
                (0, request_light_1.configure)(settings.http && settings.http.proxy, settings.http && settings.http.proxyStrictSSL);
            },
            createFileSystemHost: fileSystem_1.createNodeFileSystemHost,
            fileSystemProvide: {
                stat: (uri) => {
                    return new Promise((resolve, reject) => {
                        fs.stat(shared.getPathOfUri(uri), (err, stats) => {
                            if (stats) {
                                resolve({
                                    type: stats.isFile() ? html.FileType.File
                                        : stats.isDirectory() ? html.FileType.Directory
                                            : stats.isSymbolicLink() ? html.FileType.SymbolicLink
                                                : html.FileType.Unknown,
                                    ctime: stats.ctimeMs,
                                    mtime: stats.mtimeMs,
                                    size: stats.size,
                                });
                            }
                            else {
                                reject(err);
                            }
                        });
                    });
                },
                readDirectory: (uri) => {
                    return new Promise((resolve, reject) => {
                        fs.readdir(shared.getPathOfUri(uri), (err, files) => {
                            if (files) {
                                resolve(files.map(file => [file, html.FileType.File]));
                            }
                            else {
                                reject(err);
                            }
                        });
                    });
                },
            },
        },
    });
}
exports.createLanguageServer = createLanguageServer;
//# sourceMappingURL=index.js.map
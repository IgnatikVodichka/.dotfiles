var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfigurationHost = void 0;
const vscode = require("vscode-languageserver");
function createConfigurationHost(params, connection) {
    const callbacks = [];
    const cache = new Map();
    connection.onDidChangeConfiguration(() => __awaiter(this, void 0, void 0, function* () {
        cache.clear();
        for (const cb of callbacks) {
            cb();
        }
    }));
    return {
        ready() {
            var _a, _b;
            if ((_b = (_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.didChangeConfiguration) === null || _b === void 0 ? void 0 : _b.dynamicRegistration) {
                connection.client.register(vscode.DidChangeConfigurationNotification.type);
            }
        },
        getConfiguration(section, scopeUri) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (!scopeUri && ((_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.didChangeConfiguration)) {
                    if (!cache.has(section)) {
                        cache.set(section, yield getConfigurationWorker(section, scopeUri));
                    }
                    return cache.get(section);
                }
                return yield getConfigurationWorker(section, scopeUri);
            });
        },
        onDidChangeConfiguration(cb) {
            callbacks.push(cb);
        },
    };
    function getConfigurationWorker(section, scopeUri) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return (_a = (yield connection.workspace.getConfiguration({ scopeUri, section }))) !== null && _a !== void 0 ? _a : undefined /* replace null to undefined */;
        });
    }
}
exports.createConfigurationHost = createConfigurationHost;
//# sourceMappingURL=configurationHost.js.map
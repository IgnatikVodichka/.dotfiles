Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const featureWorkers_1 = require("../utils/featureWorkers");
const shared = require("@volar/shared");
function register(context) {
    return (document, color, range) => {
        return (0, featureWorkers_1.documentArgFeatureWorker)(context, document, range, (file) => !!file.capabilities.documentSymbol, // TODO: add color capabilitie setting
        (range, map) => map.toGeneratedRanges(range), (plugin, document, range) => { var _a; return (_a = plugin.getColorPresentations) === null || _a === void 0 ? void 0 : _a.call(plugin, document, color, range); }, (data, map) => data.map(cp => {
            if (cp.textEdit) {
                const range = map.toSourceRange(cp.textEdit.range);
                if (!range)
                    return undefined;
                cp.textEdit.range = range;
            }
            if (cp.additionalTextEdits) {
                for (const textEdit of cp.additionalTextEdits) {
                    const range = map.toSourceRange(textEdit.range);
                    if (!range)
                        return undefined;
                    textEdit.range = range;
                }
            }
            return cp;
        }).filter(shared.notEmpty));
    };
}
exports.register = register;
//# sourceMappingURL=colorPresentations.js.map
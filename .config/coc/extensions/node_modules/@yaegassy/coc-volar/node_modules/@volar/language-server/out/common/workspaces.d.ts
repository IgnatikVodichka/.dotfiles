/// <reference types="typesafe-path" />
import { ConfigurationHost } from '@volar/language-service';
import type * as ts from 'typescript/lib/tsserverlibrary';
import * as vscode from 'vscode-languageserver';
import { URI } from 'vscode-uri';
import { FileSystemHost, LanguageServerInitializationOptions, LanguageServerPlugin } from '../types';
import { CancellationTokenHost } from './cancellationPipe';
import { createDocuments } from './documents';
import { ServerContext } from './server';
export interface WorkspacesContext {
    server: ServerContext;
    initParams: vscode.InitializeParams;
    initOptions: LanguageServerInitializationOptions;
    plugins: ReturnType<LanguageServerPlugin>[];
    ts: typeof import('typescript/lib/tsserverlibrary');
    tsLocalized: ts.MapLike<string> | undefined;
    fileSystemHost: FileSystemHost;
    configurationHost: ConfigurationHost | undefined;
    documents: ReturnType<typeof createDocuments>;
    cancelTokenHost: CancellationTokenHost;
}
export interface Workspaces extends ReturnType<typeof createWorkspaces> {
}
export declare function createWorkspaces(context: WorkspacesContext): {
    workspaces: Map<string, Promise<{
        projects: {
            clear: () => void;
            values: () => IterableIterator<Promise<{
                tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
                scripts: {
                    clear: () => void;
                    values: () => IterableIterator<{
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }>;
                    uriDelete: (_uri: string) => boolean;
                    uriGet: (_uri: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    uriHas: (_uri: string) => boolean;
                    uriSet: (_uri: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                    pathDelete: (path: string) => boolean;
                    pathGet: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathHas: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathSet: (path: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                };
                languageServiceHost: import("@volar/language-service").LanguageServiceHost;
                getLanguageService: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                };
                getLanguageServiceDontCreate: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                } | undefined;
                getParsedCommandLine: () => ts.ParsedCommandLine;
                tryAddFile: (fileName: string) => void;
                dispose: () => void;
            }>>;
            uriDelete: (_uri: string) => boolean;
            uriGet: (_uri: string) => Promise<{
                tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
                scripts: {
                    clear: () => void;
                    values: () => IterableIterator<{
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }>;
                    uriDelete: (_uri: string) => boolean;
                    uriGet: (_uri: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    uriHas: (_uri: string) => boolean;
                    uriSet: (_uri: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                    pathDelete: (path: string) => boolean;
                    pathGet: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathHas: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathSet: (path: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                };
                languageServiceHost: import("@volar/language-service").LanguageServiceHost;
                getLanguageService: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                };
                getLanguageServiceDontCreate: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                } | undefined;
                getParsedCommandLine: () => ts.ParsedCommandLine;
                tryAddFile: (fileName: string) => void;
                dispose: () => void;
            }> | undefined;
            uriHas: (_uri: string) => boolean;
            uriSet: (_uri: string, item: Promise<{
                tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
                scripts: {
                    clear: () => void;
                    values: () => IterableIterator<{
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }>;
                    uriDelete: (_uri: string) => boolean;
                    uriGet: (_uri: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    uriHas: (_uri: string) => boolean;
                    uriSet: (_uri: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                    pathDelete: (path: string) => boolean;
                    pathGet: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathHas: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathSet: (path: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                };
                languageServiceHost: import("@volar/language-service").LanguageServiceHost;
                getLanguageService: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                };
                getLanguageServiceDontCreate: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                } | undefined;
                getParsedCommandLine: () => ts.ParsedCommandLine;
                tryAddFile: (fileName: string) => void;
                dispose: () => void;
            }>) => void;
            pathDelete: (path: string) => boolean;
            pathGet: (path: string) => Promise<{
                tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
                scripts: {
                    clear: () => void;
                    values: () => IterableIterator<{
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }>;
                    uriDelete: (_uri: string) => boolean;
                    uriGet: (_uri: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    uriHas: (_uri: string) => boolean;
                    uriSet: (_uri: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                    pathDelete: (path: string) => boolean;
                    pathGet: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathHas: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathSet: (path: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                };
                languageServiceHost: import("@volar/language-service").LanguageServiceHost;
                getLanguageService: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                };
                getLanguageServiceDontCreate: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                } | undefined;
                getParsedCommandLine: () => ts.ParsedCommandLine;
                tryAddFile: (fileName: string) => void;
                dispose: () => void;
            }> | undefined;
            pathHas: (path: string) => Promise<{
                tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
                scripts: {
                    clear: () => void;
                    values: () => IterableIterator<{
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }>;
                    uriDelete: (_uri: string) => boolean;
                    uriGet: (_uri: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    uriHas: (_uri: string) => boolean;
                    uriSet: (_uri: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                    pathDelete: (path: string) => boolean;
                    pathGet: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathHas: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathSet: (path: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                };
                languageServiceHost: import("@volar/language-service").LanguageServiceHost;
                getLanguageService: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                };
                getLanguageServiceDontCreate: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                } | undefined;
                getParsedCommandLine: () => ts.ParsedCommandLine;
                tryAddFile: (fileName: string) => void;
                dispose: () => void;
            }> | undefined;
            pathSet: (path: string, item: Promise<{
                tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
                scripts: {
                    clear: () => void;
                    values: () => IterableIterator<{
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }>;
                    uriDelete: (_uri: string) => boolean;
                    uriGet: (_uri: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    uriHas: (_uri: string) => boolean;
                    uriSet: (_uri: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                    pathDelete: (path: string) => boolean;
                    pathGet: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathHas: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathSet: (path: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                };
                languageServiceHost: import("@volar/language-service").LanguageServiceHost;
                getLanguageService: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                };
                getLanguageServiceDontCreate: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                } | undefined;
                getParsedCommandLine: () => ts.ParsedCommandLine;
                tryAddFile: (fileName: string) => void;
                dispose: () => void;
            }>) => void;
        };
        documentRegistry: ts.DocumentRegistry;
        getProjectAndTsConfig: (uri: string) => Promise<{
            tsconfig: string;
            project: {
                tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
                scripts: {
                    clear: () => void;
                    values: () => IterableIterator<{
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }>;
                    uriDelete: (_uri: string) => boolean;
                    uriGet: (_uri: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    uriHas: (_uri: string) => boolean;
                    uriSet: (_uri: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                    pathDelete: (path: string) => boolean;
                    pathGet: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathHas: (path: string) => {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    } | undefined;
                    pathSet: (path: string, item: {
                        version: number;
                        fileName: string;
                        snapshot: ts.IScriptSnapshot | undefined;
                        snapshotVersion: number | undefined;
                    }) => void;
                };
                languageServiceHost: import("@volar/language-service").LanguageServiceHost;
                getLanguageService: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                };
                getLanguageServiceDontCreate: () => {
                    doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                    findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                    findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                    findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                    prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                    doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                    getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                    doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                    doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                    doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                    doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                    doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                    getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                    doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                    doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                    findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                    findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                    findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                    doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                        lastChange: {
                            range: vscode.Range;
                            rangeOffset: number;
                            rangeLength: number;
                            text: string;
                        };
                    }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                    doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                    getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                    callHierarchy: {
                        doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                        getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                        getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                    };
                    dispose: () => void;
                    context: import("@volar/language-service").LanguageServiceRuntimeContext;
                } | undefined;
                getParsedCommandLine: () => ts.ParsedCommandLine;
                tryAddFile: (fileName: string) => void;
                dispose: () => void;
            };
        } | undefined>;
        getInferredProject: () => Promise<{
            tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
            scripts: {
                clear: () => void;
                values: () => IterableIterator<{
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }>;
                uriDelete: (_uri: string) => boolean;
                uriGet: (_uri: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                uriHas: (_uri: string) => boolean;
                uriSet: (_uri: string, item: {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }) => void;
                pathDelete: (path: string) => boolean;
                pathGet: (path: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                pathHas: (path: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                pathSet: (path: string, item: {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }) => void;
            };
            languageServiceHost: import("@volar/language-service").LanguageServiceHost;
            getLanguageService: () => {
                doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                    lastChange: {
                        range: vscode.Range;
                        rangeOffset: number;
                        rangeLength: number;
                        text: string;
                    };
                }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                callHierarchy: {
                    doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                    getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                    getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                };
                dispose: () => void;
                context: import("@volar/language-service").LanguageServiceRuntimeContext;
            };
            getLanguageServiceDontCreate: () => {
                doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                    lastChange: {
                        range: vscode.Range;
                        rangeOffset: number;
                        rangeLength: number;
                        text: string;
                    };
                }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                callHierarchy: {
                    doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                    getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                    getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                };
                dispose: () => void;
                context: import("@volar/language-service").LanguageServiceRuntimeContext;
            } | undefined;
            getParsedCommandLine: () => ts.ParsedCommandLine;
            tryAddFile: (fileName: string) => void;
            dispose: () => void;
        }>;
        getInferredProjectDontCreate: () => Promise<{
            tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
            scripts: {
                clear: () => void;
                values: () => IterableIterator<{
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }>;
                uriDelete: (_uri: string) => boolean;
                uriGet: (_uri: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                uriHas: (_uri: string) => boolean;
                uriSet: (_uri: string, item: {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }) => void;
                pathDelete: (path: string) => boolean;
                pathGet: (path: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                pathHas: (path: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                pathSet: (path: string, item: {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }) => void;
            };
            languageServiceHost: import("@volar/language-service").LanguageServiceHost;
            getLanguageService: () => {
                doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                    lastChange: {
                        range: vscode.Range;
                        rangeOffset: number;
                        rangeLength: number;
                        text: string;
                    };
                }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                callHierarchy: {
                    doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                    getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                    getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                };
                dispose: () => void;
                context: import("@volar/language-service").LanguageServiceRuntimeContext;
            };
            getLanguageServiceDontCreate: () => {
                doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                    lastChange: {
                        range: vscode.Range;
                        rangeOffset: number;
                        rangeLength: number;
                        text: string;
                    };
                }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                callHierarchy: {
                    doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                    getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                    getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                };
                dispose: () => void;
                context: import("@volar/language-service").LanguageServiceRuntimeContext;
            } | undefined;
            getParsedCommandLine: () => ts.ParsedCommandLine;
            tryAddFile: (fileName: string) => void;
            dispose: () => void;
        }> | undefined;
        reload: () => void;
        dispose(): void;
    }>>;
    getProject: (uri: string) => Promise<{
        tsconfig: string;
        project: {
            tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
            scripts: {
                clear: () => void;
                values: () => IterableIterator<{
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }>;
                uriDelete: (_uri: string) => boolean;
                uriGet: (_uri: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                uriHas: (_uri: string) => boolean;
                uriSet: (_uri: string, item: {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }) => void;
                pathDelete: (path: string) => boolean;
                pathGet: (path: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                pathHas: (path: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                pathSet: (path: string, item: {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }) => void;
            };
            languageServiceHost: import("@volar/language-service").LanguageServiceHost;
            getLanguageService: () => {
                doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                    lastChange: {
                        range: vscode.Range;
                        rangeOffset: number;
                        rangeLength: number;
                        text: string;
                    };
                }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                callHierarchy: {
                    doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                    getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                    getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                };
                dispose: () => void;
                context: import("@volar/language-service").LanguageServiceRuntimeContext;
            };
            getLanguageServiceDontCreate: () => {
                doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                    lastChange: {
                        range: vscode.Range;
                        rangeOffset: number;
                        rangeLength: number;
                        text: string;
                    };
                }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                callHierarchy: {
                    doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                    getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                    getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                };
                dispose: () => void;
                context: import("@volar/language-service").LanguageServiceRuntimeContext;
            } | undefined;
            getParsedCommandLine: () => ts.ParsedCommandLine;
            tryAddFile: (fileName: string) => void;
            dispose: () => void;
        };
    } | {
        tsconfig: undefined;
        project: {
            tsConfig: ts.CompilerOptions | import("typesafe-path").PosixPath;
            scripts: {
                clear: () => void;
                values: () => IterableIterator<{
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }>;
                uriDelete: (_uri: string) => boolean;
                uriGet: (_uri: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                uriHas: (_uri: string) => boolean;
                uriSet: (_uri: string, item: {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }) => void;
                pathDelete: (path: string) => boolean;
                pathGet: (path: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                pathHas: (path: string) => {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                } | undefined;
                pathSet: (path: string, item: {
                    version: number;
                    fileName: string;
                    snapshot: ts.IScriptSnapshot | undefined;
                    snapshotVersion: number | undefined;
                }) => void;
            };
            languageServiceHost: import("@volar/language-service").LanguageServiceHost;
            getLanguageService: () => {
                doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                    lastChange: {
                        range: vscode.Range;
                        rangeOffset: number;
                        rangeLength: number;
                        text: string;
                    };
                }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                callHierarchy: {
                    doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                    getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                    getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                };
                dispose: () => void;
                context: import("@volar/language-service").LanguageServiceRuntimeContext;
            };
            getLanguageServiceDontCreate: () => {
                doValidation: (uri: string, token?: vscode.CancellationToken | undefined, response?: ((result: vscode.Diagnostic[]) => void) | undefined) => Promise<vscode.Diagnostic[]>;
                findReferences: (uri: string, position: vscode.Position) => Promise<vscode.Location[] | undefined>;
                findFileReferences: (uri: string) => import("@volar/language-service").NullableResult<vscode.Location[]>;
                findDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findTypeDefinition: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                findImplementations: (uri: string, position: vscode.Position) => Promise<vscode.LocationLink[] | undefined>;
                prepareRename: (uri: string, position: vscode.Position) => Promise<NonNullable<vscode.Range | vscode.ResponseError<void> | null | undefined> | undefined>;
                doRename: (uri: string, position: vscode.Position, newName: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getEditsForFileRename: (oldUri: string, newUri: string) => Promise<vscode.WorkspaceEdit | undefined>;
                getSemanticTokens: (uri: string, range: vscode.Range | undefined, legend: vscode.SemanticTokensLegend, cancelToken: vscode.CancellationToken, reportProgress?: ((tokens: import("@volar/language-service").SemanticToken[]) => void) | undefined) => Promise<import("@volar/language-service").SemanticToken[] | undefined> | undefined;
                doHover: (uri: string, position: vscode.Position) => Promise<vscode.Hover | undefined>;
                doComplete: (uri: string, position: vscode.Position, completionContext?: vscode.CompletionContext | undefined) => Promise<vscode.CompletionList>;
                doCodeActions: (uri: string, range: vscode.Range, codeActionContext: vscode.CodeActionContext) => Promise<vscode.CodeAction[] | undefined>;
                doCodeActionResolve: (item: vscode.CodeAction) => Promise<vscode.CodeAction>;
                doCompletionResolve: (item: vscode.CompletionItem) => Promise<vscode.CompletionItem>;
                getSignatureHelp: (uri: string, position: vscode.Position, signatureHelpContext?: vscode.SignatureHelpContext | undefined) => Promise<vscode.SignatureHelp | undefined>;
                doCodeLens: (uri: string) => Promise<vscode.CodeLens[]>;
                doCodeLensResolve: (item: vscode.CodeLens) => Promise<vscode.CodeLens>;
                findDocumentHighlights: (uri: string, position: vscode.Position) => Promise<vscode.DocumentHighlight[] | undefined>;
                findDocumentLinks: (uri: string) => Promise<vscode.DocumentLink[]>;
                findWorkspaceSymbols: (query: string) => Promise<vscode.SymbolInformation[]>;
                doAutoInsert: (uri: string, position: vscode.Position, autoInsertContext: {
                    lastChange: {
                        range: vscode.Range;
                        rangeOffset: number;
                        rangeLength: number;
                        text: string;
                    };
                }) => Promise<NonNullable<string | vscode.TextEdit | null | undefined> | undefined>;
                doExecuteCommand: (command: string, args: import("@volar/language-service").ExecutePluginCommandArgs, executeCommandContext: import("@volar/language-service").ExecuteCommandContext) => Promise<void>;
                getInlayHints: (uri: string, range: vscode.Range) => Promise<vscode.InlayHint[] | undefined>;
                callHierarchy: {
                    doPrepare(uri: string, position: vscode.Position): Promise<vscode.CallHierarchyItem[] | undefined>;
                    getIncomingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyIncomingCall[]>;
                    getOutgoingCalls(item: vscode.CallHierarchyItem): Promise<vscode.CallHierarchyOutgoingCall[]>;
                };
                dispose: () => void;
                context: import("@volar/language-service").LanguageServiceRuntimeContext;
            } | undefined;
            getParsedCommandLine: () => ts.ParsedCommandLine;
            tryAddFile: (fileName: string) => void;
            dispose: () => void;
        } | undefined;
    } | undefined>;
    reloadProject: () => Promise<void>;
    add: (rootUri: URI) => void;
    remove: (rootUri: URI) => void;
};
